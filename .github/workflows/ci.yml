name: NEOMINT Animations CI/CD Pipeline

on:
  push:
    branches: [ main, refactor/golden-repo-migration ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]
  workflow_dispatch:

# Prevent multiple CI runs from interfering
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_ENV: production
  CI: true

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write

jobs:
  # Quality checks and testing job
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-
            ${{ runner.os }}-node-
            ${{ runner.os }}-

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        continue-on-error: false

      - name: Run Jest tests
        run: npm test -- --coverage --watchAll=false
        env:
          CI: true

      - name: Upload test coverage
        if: matrix.node-version == '18.x'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

  # Build job
  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: 'npm'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-18.x-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-18.x-
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Verify build output
        run: |
          echo "Checking build artifacts..."
          if [ ! -d "dist" ]; then
            echo "Error: dist directory not found!"
            exit 1
          fi
          if [ ! -f "dist/index.cjs.js" ]; then
            echo "Error: CommonJS build not found!"
            exit 1
          fi
          if [ ! -f "dist/index.esm.js" ]; then
            echo "Error: ESM build not found!"
            exit 1
          fi
          if [ ! -d "dist/types" ]; then
            echo "Error: TypeScript declarations not found!"
            exit 1
          fi
          if [ ! -d "dist/ts" ]; then
            echo "Error: TypeScript compiled output not found!"
            exit 1
          fi
          echo "Build verification successful âœ“"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-artifacts
          path: dist/
          retention-days: 30
          if-no-files-found: error

  # Publish to npm job (only on release)
  publish:
    name: Publish to npm
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'release'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js with npm registry
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-18.x-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-18.x-
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Verify npm authentication
        run: npm whoami
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}

      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}

      - name: Create GitHub deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'npm',
              description: 'Published to npm registry',
              auto_merge: false,
              required_contexts: []
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: 'https://www.npmjs.com/package/@neomint/animations',
              description: 'Successfully published to npm'
            });

  # Security audit job
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate --json > npm-audit.json || echo "Audit found issues"
          npm audit --audit-level=moderate
        continue-on-error: true

      - name: Install OSV Scanner
        run: |
          echo "Installing OSV Scanner..."
          if ! curl -L https://github.com/google/osv-scanner/releases/latest/download/osv-scanner_linux_amd64 -o osv-scanner; then
            echo "Failed to download OSV scanner, creating dummy scanner"
            echo '#!/bin/bash' > osv-scanner
            echo 'echo "OSV scanner not available, skipping scan"' >> osv-scanner
            echo 'echo "{\"version\":\"2.1.0\",\"runs\":[]}" > "$4"' >> osv-scanner
          fi
          chmod +x osv-scanner
          sudo mv osv-scanner /usr/local/bin/

      - name: Run OSV Scanner
        run: |
          osv-scanner -r --format=sarif --output=osv-results.sarif . || echo "OSV scanner failed, creating empty SARIF file"
          # Ensure SARIF file exists for upload
          if [ ! -f "osv-results.sarif" ]; then
            echo '{"version":"2.1.0","runs":[]}' > osv-results.sarif
          fi
        continue-on-error: true

      - name: Upload OSV Results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'osv-results.sarif'

      - name: Run Secret Scanner (detect-secrets)
        run: |
          pip install detect-secrets
          detect-secrets scan --all-files --baseline .secrets.baseline || true
          if [ -f .secrets.baseline ]; then
            echo "Secrets baseline created/updated"
          fi

      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-reports
          path: |
            npm-audit.json
            osv-results.sarif
            .secrets.baseline
          retention-days: 30