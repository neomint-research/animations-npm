87701db57dd53337a8a574c16bbddf91
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.usePerformanceMonitor = void 0;
var _react = require("react");
var _performance = require("../performance");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
const usePerformanceMonitor = (enabled = true) => {
  const monitorRef = (0, _react.useRef)(new _performance.PerformanceMonitor());
  const [performanceData, setPerformanceData] = (0, _react.useState)({
    fps: 0,
    averageFPS: 0,
    performanceLevel: 'medium',
    deviceCapabilities: (0, _performance.detectDeviceCapabilities)(),
    optimalSettings: null
  });
  (0, _react.useEffect)(() => {
    const monitor = monitorRef.current;
    const deviceCaps = (0, _performance.detectDeviceCapabilities)();
    const optimal = (0, _performance.getOptimalSettings)(deviceCaps);
    setPerformanceData(prev => _objectSpread(_objectSpread({}, prev), {}, {
      deviceCapabilities: deviceCaps,
      optimalSettings: optimal
    }));
    if (enabled) {
      monitor.startMonitoring();
    }
    return () => {
      monitor.isMonitoring = false;
    };
  }, [enabled]);
  const recordFrame = () => {
    if (!enabled) return;
    const monitor = monitorRef.current;
    monitor.recordFrame();
    setPerformanceData(prev => _objectSpread(_objectSpread({}, prev), {}, {
      fps: monitor.fps,
      averageFPS: monitor.getAverageFPS(),
      performanceLevel: monitor.getPerformanceLevel()
    }));
  };
  return _objectSpread(_objectSpread({}, performanceData), {}, {
    recordFrame,
    monitor: monitorRef.current
  });
};
exports.usePerformanceMonitor = usePerformanceMonitor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX3BlcmZvcm1hbmNlIiwib3duS2V5cyIsImUiLCJyIiwidCIsIk9iamVjdCIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJvIiwiZmlsdGVyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJmb3JFYWNoIiwiX2RlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsIl90b1Byb3BlcnR5S2V5IiwidmFsdWUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImkiLCJfdG9QcmltaXRpdmUiLCJTeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsImNhbGwiLCJUeXBlRXJyb3IiLCJTdHJpbmciLCJOdW1iZXIiLCJ1c2VQZXJmb3JtYW5jZU1vbml0b3IiLCJlbmFibGVkIiwibW9uaXRvclJlZiIsInVzZVJlZiIsIlBlcmZvcm1hbmNlTW9uaXRvciIsInBlcmZvcm1hbmNlRGF0YSIsInNldFBlcmZvcm1hbmNlRGF0YSIsInVzZVN0YXRlIiwiZnBzIiwiYXZlcmFnZUZQUyIsInBlcmZvcm1hbmNlTGV2ZWwiLCJkZXZpY2VDYXBhYmlsaXRpZXMiLCJkZXRlY3REZXZpY2VDYXBhYmlsaXRpZXMiLCJvcHRpbWFsU2V0dGluZ3MiLCJ1c2VFZmZlY3QiLCJtb25pdG9yIiwiY3VycmVudCIsImRldmljZUNhcHMiLCJvcHRpbWFsIiwiZ2V0T3B0aW1hbFNldHRpbmdzIiwicHJldiIsInN0YXJ0TW9uaXRvcmluZyIsImlzTW9uaXRvcmluZyIsInJlY29yZEZyYW1lIiwiZ2V0QXZlcmFnZUZQUyIsImdldFBlcmZvcm1hbmNlTGV2ZWwiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsidXNlUGVyZm9ybWFuY2VNb25pdG9yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgUGVyZm9ybWFuY2VNb25pdG9yLCBkZXRlY3REZXZpY2VDYXBhYmlsaXRpZXMsIGdldE9wdGltYWxTZXR0aW5ncyB9IGZyb20gJy4uL3BlcmZvcm1hbmNlJztcclxuXHJcbmV4cG9ydCBjb25zdCB1c2VQZXJmb3JtYW5jZU1vbml0b3IgPSAoZW5hYmxlZCA9IHRydWUpID0+IHtcclxuICBjb25zdCBtb25pdG9yUmVmID0gdXNlUmVmKG5ldyBQZXJmb3JtYW5jZU1vbml0b3IoKSk7XHJcbiAgY29uc3QgW3BlcmZvcm1hbmNlRGF0YSwgc2V0UGVyZm9ybWFuY2VEYXRhXSA9IHVzZVN0YXRlKHtcclxuICAgIGZwczogMCxcclxuICAgIGF2ZXJhZ2VGUFM6IDAsXHJcbiAgICBwZXJmb3JtYW5jZUxldmVsOiAnbWVkaXVtJyxcclxuICAgIGRldmljZUNhcGFiaWxpdGllczogZGV0ZWN0RGV2aWNlQ2FwYWJpbGl0aWVzKCksXHJcbiAgICBvcHRpbWFsU2V0dGluZ3M6IG51bGxcclxuICB9KTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGNvbnN0IG1vbml0b3IgPSBtb25pdG9yUmVmLmN1cnJlbnQ7XHJcbiAgICBjb25zdCBkZXZpY2VDYXBzID0gZGV0ZWN0RGV2aWNlQ2FwYWJpbGl0aWVzKCk7XHJcbiAgICBjb25zdCBvcHRpbWFsID0gZ2V0T3B0aW1hbFNldHRpbmdzKGRldmljZUNhcHMpO1xyXG5cclxuICAgIHNldFBlcmZvcm1hbmNlRGF0YShwcmV2ID0+ICh7XHJcbiAgICAgIC4uLnByZXYsXHJcbiAgICAgIGRldmljZUNhcGFiaWxpdGllczogZGV2aWNlQ2FwcyxcclxuICAgICAgb3B0aW1hbFNldHRpbmdzOiBvcHRpbWFsXHJcbiAgICB9KSk7XHJcblxyXG4gICAgaWYgKGVuYWJsZWQpIHtcclxuICAgICAgbW9uaXRvci5zdGFydE1vbml0b3JpbmcoKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICBtb25pdG9yLmlzTW9uaXRvcmluZyA9IGZhbHNlO1xyXG4gICAgfTtcclxuICB9LCBbZW5hYmxlZF0pO1xyXG5cclxuICBjb25zdCByZWNvcmRGcmFtZSA9ICgpID0+IHtcclxuICAgIGlmICghZW5hYmxlZCkgcmV0dXJuO1xyXG4gICAgXHJcbiAgICBjb25zdCBtb25pdG9yID0gbW9uaXRvclJlZi5jdXJyZW50O1xyXG4gICAgbW9uaXRvci5yZWNvcmRGcmFtZSgpO1xyXG4gICAgXHJcbiAgICBzZXRQZXJmb3JtYW5jZURhdGEocHJldiA9PiAoe1xyXG4gICAgICAuLi5wcmV2LFxyXG4gICAgICBmcHM6IG1vbml0b3IuZnBzLFxyXG4gICAgICBhdmVyYWdlRlBTOiBtb25pdG9yLmdldEF2ZXJhZ2VGUFMoKSxcclxuICAgICAgcGVyZm9ybWFuY2VMZXZlbDogbW9uaXRvci5nZXRQZXJmb3JtYW5jZUxldmVsKClcclxuICAgIH0pKTtcclxuICB9O1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgLi4ucGVyZm9ybWFuY2VEYXRhLFxyXG4gICAgcmVjb3JkRnJhbWUsXHJcbiAgICBtb25pdG9yOiBtb25pdG9yUmVmLmN1cnJlbnRcclxuICB9O1xyXG59OyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQWtHLFNBQUFFLFFBQUFDLENBQUEsRUFBQUMsQ0FBQSxRQUFBQyxDQUFBLEdBQUFDLE1BQUEsQ0FBQUMsSUFBQSxDQUFBSixDQUFBLE9BQUFHLE1BQUEsQ0FBQUUscUJBQUEsUUFBQUMsQ0FBQSxHQUFBSCxNQUFBLENBQUFFLHFCQUFBLENBQUFMLENBQUEsR0FBQUMsQ0FBQSxLQUFBSyxDQUFBLEdBQUFBLENBQUEsQ0FBQUMsTUFBQSxXQUFBTixDQUFBLFdBQUFFLE1BQUEsQ0FBQUssd0JBQUEsQ0FBQVIsQ0FBQSxFQUFBQyxD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