2ea93fae1df023a4ee6d83df9fe0b65d
"use strict";
"use client";

var w = Object.create;
var n = Object.defineProperty;
var L = Object.getOwnPropertyDescriptor;
var S = Object.getOwnPropertyNames,
  p = Object.getOwnPropertySymbols,
  a = Object.getPrototypeOf,
  c = Object.prototype.hasOwnProperty,
  g = Object.prototype.propertyIsEnumerable;
var f = (o, r, t) => r in o ? n(o, r, {
    enumerable: !0,
    configurable: !0,
    writable: !0,
    value: t
  }) : o[r] = t,
  i = (o, r) => {
    for (var t in r || (r = {})) c.call(r, t) && f(o, t, r[t]);
    if (p) for (var t of p(r)) g.call(r, t) && f(o, t, r[t]);
    return o;
  };
var h = (o, r) => {
    for (var t in r) n(o, t, {
      get: r[t],
      enumerable: !0
    });
  },
  l = (o, r, t, s) => {
    if (r && typeof r == "object" || typeof r == "function") for (let e of S(r)) !c.call(o, e) && e !== t && n(o, e, {
      get: () => r[e],
      enumerable: !(s = L(r, e)) || s.enumerable
    });
    return o;
  };
var x = (o, r, t) => (t = o != null ? w(a(o)) : {}, l(r || !o || !o.__esModule ? n(t, "default", {
    value: o,
    enumerable: !0
  }) : t, o)),
  G = o => l(n({}, "__esModule", {
    value: !0
  }), o);
var M = {};
h(M, {
  default: () => C
});
module.exports = G(M);
var m = x(require("react")),
  d = require("react"),
  u = require("../IconoirContext.js");
const V = (o, r) => {
    const t = m.useContext(u.IconoirContext),
      s = i(i({}, t), o);
    return m.createElement("svg", i({
      width: "1.5em",
      height: "1.5em",
      strokeWidth: 1.5,
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      color: "currentColor",
      ref: r
    }, s), m.createElement("path", {
      d: "M9 21H12M15 21H12M12 21L12 11M12 7L12 11M12 11L6 11L9 3H15L18 11H12Z",
      stroke: "currentColor",
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }));
  },
  v = (0, d.forwardRef)(V);
var C = v;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ3IiwiT2JqZWN0IiwiY3JlYXRlIiwibiIsImRlZmluZVByb3BlcnR5IiwiTCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIlMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwicCIsImdldE93blByb3BlcnR5U3ltYm9scyIsImEiLCJnZXRQcm90b3R5cGVPZiIsImMiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImciLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImYiLCJvIiwiciIsInQiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ2YWx1ZSIsImkiLCJjYWxsIiwiaCIsImdldCIsImwiLCJzIiwiZSIsIngiLCJfX2VzTW9kdWxlIiwiRyIsIk0iLCJkZWZhdWx0IiwiQyIsIm1vZHVsZSIsImV4cG9ydHMiLCJtIiwicmVxdWlyZSIsImQiLCJ1IiwiViIsInVzZUNvbnRleHQiLCJJY29ub2lyQ29udGV4dCIsImNyZWF0ZUVsZW1lbnQiLCJ3aWR0aCIsImhlaWdodCIsInN0cm9rZVdpZHRoIiwidmlld0JveCIsImZpbGwiLCJ4bWxucyIsImNvbG9yIiwicmVmIiwic3Ryb2tlIiwic3Ryb2tlTGluZWNhcCIsInN0cm9rZUxpbmVqb2luIiwidiIsImZvcndhcmRSZWYiXSwic291cmNlcyI6WyJMYW1wLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiO3ZhciB3PU9iamVjdC5jcmVhdGU7dmFyIG49T2JqZWN0LmRlZmluZVByb3BlcnR5O3ZhciBMPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7dmFyIFM9T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMscD1PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzLGE9T2JqZWN0LmdldFByb3RvdHlwZU9mLGM9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxnPU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7dmFyIGY9KG8scix0KT0+ciBpbiBvP24obyxyLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMCx2YWx1ZTp0fSk6b1tyXT10LGk9KG8scik9Pntmb3IodmFyIHQgaW4gcnx8KHI9e30pKWMuY2FsbChyLHQpJiZmKG8sdCxyW3RdKTtpZihwKWZvcih2YXIgdCBvZiBwKHIpKWcuY2FsbChyLHQpJiZmKG8sdCxyW3RdKTtyZXR1cm4gb307dmFyIGg9KG8scik9Pntmb3IodmFyIHQgaW4gciluKG8sdCx7Z2V0OnJbdF0sZW51bWVyYWJsZTohMH0pfSxsPShvLHIsdCxzKT0+e2lmKHImJnR5cGVvZiByPT1cIm9iamVjdFwifHx0eXBlb2Ygcj09XCJmdW5jdGlvblwiKWZvcihsZXQgZSBvZiBTKHIpKSFjLmNhbGwobyxlKSYmZSE9PXQmJm4obyxlLHtnZXQ6KCk9PnJbZV0sZW51bWVyYWJsZTohKHM9TChyLGUpKXx8cy5lbnVtZXJhYmxlfSk7cmV0dXJuIG99O3ZhciB4PShvLHIsdCk9Pih0PW8hPW51bGw/dyhhKG8pKTp7fSxsKHJ8fCFvfHwhby5fX2VzTW9kdWxlP24odCxcImRlZmF1bHRcIix7dmFsdWU6byxlbnVtZXJhYmxlOiEwfSk6dCxvKSksRz1vPT5sKG4oe30sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksbyk7dmFyIE09e307aChNLHtkZWZhdWx0OigpPT5DfSk7bW9kdWxlLmV4cG9ydHM9RyhNKTt2YXIgbT14KHJlcXVpcmUoXCJyZWFjdFwiKSksZD1yZXF1aXJlKFwicmVhY3RcIiksdT1yZXF1aXJlKFwiLi4vSWNvbm9pckNvbnRleHQuanNcIik7Y29uc3QgVj0obyxyKT0+e2NvbnN0IHQ9bS51c2VDb250ZXh0KHUuSWNvbm9pckNvbnRleHQpLHM9aShpKHt9LHQpLG8pO3JldHVybiBtLmNyZWF0ZUVsZW1lbnQoXCJzdmdcIixpKHt3aWR0aDpcIjEuNWVtXCIsaGVpZ2h0OlwiMS41ZW1cIixzdHJva2VXaWR0aDoxLjUsdmlld0JveDpcIjAgMCAyNCAyNFwiLGZpbGw6XCJub25lXCIseG1sbnM6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLGNvbG9yOlwiY3VycmVudENvbG9yXCIscmVmOnJ9LHMpLG0uY3JlYXRlRWxlbWVudChcInBhdGhcIix7ZDpcIk05IDIxSDEyTTE1IDIxSDEyTTEyIDIxTDEyIDExTTEyIDdMMTIgMTFNMTIgMTFMNiAxMUw5IDNIMTVMMTggMTFIMTJaXCIsc3Ryb2tlOlwiY3VycmVudENvbG9yXCIsc3Ryb2tlTGluZWNhcDpcInJvdW5kXCIsc3Ryb2tlTGluZWpvaW46XCJyb3VuZFwifSkpfSx2PSgwLGQuZm9yd2FyZFJlZikoVik7dmFyIEM9djtcbiJdLCJtYXBwaW5ncyI6IjtBQUFBLFlBQVk7O0FBQUMsSUFBSUEsQ0FBQyxHQUFDQyxNQUFNLENBQUNDLE1BQU07QUFBQyxJQUFJQyxDQUFDLEdBQUNGLE1BQU0sQ0FBQ0csY0FBYztBQUFDLElBQUlDLENBQUMsR0FBQ0osTUFBTSxDQUFDSyx3QkFBd0I7QUFBQyxJQUFJQyxDQUFDLEdBQUNOLE1BQU0sQ0FBQ08sbUJBQW1CO0VBQUNDLENBQUMsR0FBQ1IsTUFBTSxDQUFDUyxxQkFBcUI7RUFBQ0MsQ0FBQyxHQUFDVixNQUFNLENBQUNXLGNBQWM7RUFBQ0MsQ0FBQyxHQUFDWixNQUFNLENBQUNhLFNBQVMsQ0FBQ0MsY0FBYztFQUFDQyxDQUFDLEdBQUNmLE1BQU0sQ0FBQ2EsU0FBUyxDQUFDRyxvQkFBb0I7QUFBQyxJQUFJQyxDQUFDLEdBQUNBLENBQUNDLENBQUMsRUFBQ0MsQ0FBQyxFQUFDQyxDQUFDLEtBQUdELENBQUMsSUFBSUQsQ0FBQyxHQUFDaEIsQ0FBQyxDQUFDZ0IsQ0FBQyxFQUFDQyxDQUFDLEVBQUM7SUFBQ0UsVUFBVSxFQUFDLENBQUMsQ0FBQztJQUFDQyxZQUFZLEVBQUMsQ0FBQyxDQUFDO0lBQUNDLFFBQVEsRUFBQyxDQUFDLENBQUM7SUFBQ0MsS0FBSyxFQUFDSjtFQUFDLENBQUMsQ0FBQyxHQUFDRixDQUFDLENBQUNDLENBQUMsQ0FBQyxHQUFDQyxDQUFDO0VBQUNLLENBQUMs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