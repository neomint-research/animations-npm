8c6f8bc7e8e1e8efb0683d03772f7d88
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/**
 * Jest Setup Configuration
 * Basic setup for testing environment
 */

// Polyfills and global test environment setup
global.requestAnimationFrame = function (callback) {
  setTimeout(callback, 0);
};
global.cancelAnimationFrame = function (id) {
  clearTimeout(id);
};

// Mock Canvas API for tests
HTMLCanvasElement.prototype.getContext = jest.fn(function () {
  return {
    clearRect: jest.fn(),
    fillRect: jest.fn(),
    strokeRect: jest.fn(),
    beginPath: jest.fn(),
    moveTo: jest.fn(),
    lineTo: jest.fn(),
    closePath: jest.fn(),
    stroke: jest.fn(),
    fill: jest.fn(),
    arc: jest.fn(),
    save: jest.fn(),
    restore: jest.fn(),
    translate: jest.fn(),
    scale: jest.fn(),
    rotate: jest.fn(),
    setTransform: jest.fn(),
    resetTransform: jest.fn(),
    createLinearGradient: jest.fn(function () {
      return {
        addColorStop: jest.fn()
      };
    }),
    createRadialGradient: jest.fn(function () {
      return {
        addColorStop: jest.fn()
      };
    }),
    measureText: jest.fn(function () {
      return {
        width: 0
      };
    })
  };
});

// Mock window.matchMedia
Object.defineProperty(window, 'matchMedia', {
  writable: true,
  value: jest.fn().mockImplementation(function (query) {
    return {
      matches: false,
      media: query,
      onchange: null,
      addListener: jest.fn(),
      removeListener: jest.fn(),
      addEventListener: jest.fn(),
      removeEventListener: jest.fn(),
      dispatchEvent: jest.fn()
    };
  })
});

// Mock IntersectionObserver
global.IntersectionObserver = /*#__PURE__*/function () {
  function IntersectionObserver() {
    _classCallCheck(this, IntersectionObserver);
  }
  return _createClass(IntersectionObserver, [{
    key: "disconnect",
    value: function disconnect() {}
  }, {
    key: "observe",
    value: function observe() {}
  }, {
    key: "unobserve",
    value: function unobserve() {}
  }]);
}();

// Mock ResizeObserver
global.ResizeObserver = /*#__PURE__*/function () {
  function ResizeObserver(callback) {
    _classCallCheck(this, ResizeObserver);
    this.callback = callback;
  }
  return _createClass(ResizeObserver, [{
    key: "observe",
    value: function observe() {}
  }, {
    key: "unobserve",
    value: function unobserve() {}
  }, {
    key: "disconnect",
    value: function disconnect() {}
  }]);
}();

// Performance API mock
global.performance = {
  now: jest.fn(function () {
    return Date.now();
  }),
  mark: jest.fn(),
  measure: jest.fn(),
  clearMarks: jest.fn(),
  clearMeasures: jest.fn()
};

// Console error/warning suppression for expected test scenarios
var originalError = console.error;
var originalWarn = console.warn;
beforeAll(function () {
  console.error = function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    if (typeof args[0] === 'string' && args[0].includes('Warning: ReactDOM.render')) {
      return;
    }
    originalError.call.apply(originalError, [console].concat(args));
  };
  console.warn = function () {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    if (typeof args[0] === 'string' && args[0].includes('componentWillReceiveProps')) {
      return;
    }
    originalWarn.call.apply(originalWarn, [console].concat(args));
  };
});
afterAll(function () {
  console.error = originalError;
  console.warn = originalWarn;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnbG9iYWwiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYWxsYmFjayIsInNldFRpbWVvdXQiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImlkIiwiY2xlYXJUaW1lb3V0IiwiSFRNTENhbnZhc0VsZW1lbnQiLCJwcm90b3R5cGUiLCJnZXRDb250ZXh0IiwiamVzdCIsImZuIiwiY2xlYXJSZWN0IiwiZmlsbFJlY3QiLCJzdHJva2VSZWN0IiwiYmVnaW5QYXRoIiwibW92ZVRvIiwibGluZVRvIiwiY2xvc2VQYXRoIiwic3Ryb2tlIiwiZmlsbCIsImFyYyIsInNhdmUiLCJyZXN0b3JlIiwidHJhbnNsYXRlIiwic2NhbGUiLCJyb3RhdGUiLCJzZXRUcmFuc2Zvcm0iLCJyZXNldFRyYW5zZm9ybSIsImNyZWF0ZUxpbmVhckdyYWRpZW50IiwiYWRkQ29sb3JTdG9wIiwiY3JlYXRlUmFkaWFsR3JhZGllbnQiLCJtZWFzdXJlVGV4dCIsIndpZHRoIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ3aW5kb3ciLCJ3cml0YWJsZSIsInZhbHVlIiwibW9ja0ltcGxlbWVudGF0aW9uIiwicXVlcnkiLCJtYXRjaGVzIiwibWVkaWEiLCJvbmNoYW5nZSIsImFkZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImRpc3BhdGNoRXZlbnQiLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsIl9jbGFzc0NhbGxDaGVjayIsIl9jcmVhdGVDbGFzcyIsImtleSIsImRpc2Nvbm5lY3QiLCJvYnNlcnZlIiwidW5vYnNlcnZlIiwiUmVzaXplT2JzZXJ2ZXIiLCJwZXJmb3JtYW5jZSIsIm5vdyIsIkRhdGUiLCJtYXJrIiwibWVhc3VyZSIsImNsZWFyTWFya3MiLCJjbGVhck1lYXN1cmVzIiwib3JpZ2luYWxFcnJvciIsImNvbnNvbGUiLCJlcnJvciIsIm9yaWdpbmFsV2FybiIsIndhcm4iLCJiZWZvcmVBbGwiLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJncyIsIkFycmF5IiwiX2tleSIsImluY2x1ZGVzIiwiY2FsbCIsImFwcGx5IiwiY29uY2F0IiwiX2xlbjIiLCJfa2V5MiIsImFmdGVyQWxsIl0sInNvdXJjZXMiOlsic2V0dXBUZXN0cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogSmVzdCBTZXR1cCBDb25maWd1cmF0aW9uXHJcbiAqIEJhc2ljIHNldHVwIGZvciB0ZXN0aW5nIGVudmlyb25tZW50XHJcbiAqL1xyXG5cclxuLy8gUG9seWZpbGxzIGFuZCBnbG9iYWwgdGVzdCBlbnZpcm9ubWVudCBzZXR1cFxyXG5nbG9iYWwucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gKGNhbGxiYWNrKSA9PiB7XHJcbiAgc2V0VGltZW91dChjYWxsYmFjaywgMCk7XHJcbn07XHJcblxyXG5nbG9iYWwuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSAoaWQpID0+IHtcclxuICBjbGVhclRpbWVvdXQoaWQpO1xyXG59O1xyXG5cclxuLy8gTW9jayBDYW52YXMgQVBJIGZvciB0ZXN0c1xyXG5IVE1MQ2FudmFzRWxlbWVudC5wcm90b3R5cGUuZ2V0Q29udGV4dCA9IGplc3QuZm4oKCkgPT4gKHtcclxuICBjbGVhclJlY3Q6IGplc3QuZm4oKSxcclxuICBmaWxsUmVjdDogamVzdC5mbigpLFxyXG4gIHN0cm9rZVJlY3Q6IGplc3QuZm4oKSxcclxuICBiZWdpblBhdGg6IGplc3QuZm4oKSxcclxuICBtb3ZlVG86IGplc3QuZm4oKSxcclxuICBsaW5lVG86IGplc3QuZm4oKSxcclxuICBjbG9zZVBhdGg6IGplc3QuZm4oKSxcclxuICBzdHJva2U6IGplc3QuZm4oKSxcclxuICBmaWxsOiBqZXN0LmZuKCksXHJcbiAgYXJjOiBqZXN0LmZuKCksXHJcbiAgc2F2ZTogamVzdC5mbigpLFxyXG4gIHJlc3RvcmU6IGplc3QuZm4oKSxcclxuICB0cmFuc2xhdGU6IGplc3QuZm4oKSxcclxuICBzY2FsZTogamVzdC5mbigpLFxyXG4gIHJvdGF0ZTogamVzdC5mbigpLFxyXG4gIHNldFRyYW5zZm9ybTogamVzdC5mbigpLFxyXG4gIHJlc2V0VHJhbnNmb3JtOiBqZXN0LmZuKCksXHJcbiAgY3JlYXRlTGluZWFyR3JhZGllbnQ6IGplc3QuZm4oKCkgPT4gKHtcclxuICAgIGFkZENvbG9yU3RvcDogamVzdC5mbigpXHJcbiAgfSkpLFxyXG4gIGNyZWF0ZVJhZGlhbEdyYWRpZW50OiBqZXN0LmZuKCgpID0+ICh7XHJcbiAgICBhZGRDb2xvclN0b3A6IGplc3QuZm4oKVxyXG4gIH0pKSxcclxuICBtZWFzdXJlVGV4dDogamVzdC5mbigoKSA9PiAoeyB3aWR0aDogMCB9KSlcclxufSkpO1xyXG5cclxuLy8gTW9jayB3aW5kb3cubWF0Y2hNZWRpYVxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCAnbWF0Y2hNZWRpYScsIHtcclxuICB3cml0YWJsZTogdHJ1ZSxcclxuICB2YWx1ZTogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbihxdWVyeSA9PiAoe1xyXG4gICAgbWF0Y2hlczogZmFsc2UsXHJcbiAgICBtZWRpYTogcXVlcnksXHJcbiAgICBvbmNoYW5nZTogbnVsbCxcclxuICAgIGFkZExpc3RlbmVyOiBqZXN0LmZuKCksXHJcbiAgICByZW1vdmVMaXN0ZW5lcjogamVzdC5mbigpLFxyXG4gICAgYWRkRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxyXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxyXG4gICAgZGlzcGF0Y2hFdmVudDogamVzdC5mbigpLFxyXG4gIH0pKSxcclxufSk7XHJcblxyXG4vLyBNb2NrIEludGVyc2VjdGlvbk9ic2VydmVyXHJcbmdsb2JhbC5JbnRlcnNlY3Rpb25PYnNlcnZlciA9IGNsYXNzIEludGVyc2VjdGlvbk9ic2VydmVyIHtcclxuICBjb25zdHJ1Y3RvcigpIHt9XHJcbiAgZGlzY29ubmVjdCgpIHt9XHJcbiAgb2JzZXJ2ZSgpIHt9XHJcbiAgdW5vYnNlcnZlKCkge31cclxufTtcclxuXHJcbi8vIE1vY2sgUmVzaXplT2JzZXJ2ZXJcclxuZ2xvYmFsLlJlc2l6ZU9ic2VydmVyID0gY2xhc3MgUmVzaXplT2JzZXJ2ZXIge1xyXG4gIGNvbnN0cnVjdG9yKGNhbGxiYWNrKSB7XHJcbiAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XHJcbiAgfVxyXG4gIG9ic2VydmUoKSB7fVxyXG4gIHVub2JzZXJ2ZSgpIHt9XHJcbiAgZGlzY29ubmVjdCgpIHt9XHJcbn07XHJcblxyXG4vLyBQZXJmb3JtYW5jZSBBUEkgbW9ja1xyXG5nbG9iYWwucGVyZm9ybWFuY2UgPSB7XHJcbiAgbm93OiBqZXN0LmZuKCgpID0+IERhdGUubm93KCkpLFxyXG4gIG1hcms6IGplc3QuZm4oKSxcclxuICBtZWFzdXJlOiBqZXN0LmZuKCksXHJcbiAgY2xlYXJNYXJrczogamVzdC5mbigpLFxyXG4gIGNsZWFyTWVhc3VyZXM6IGplc3QuZm4oKVxyXG59O1xyXG5cclxuLy8gQ29uc29sZSBlcnJvci93YXJuaW5nIHN1cHByZXNzaW9uIGZvciBleHBlY3RlZCB0ZXN0IHNjZW5hcmlvc1xyXG5jb25zdCBvcmlnaW5hbEVycm9yID0gY29uc29sZS5lcnJvcjtcclxuY29uc3Qgb3JpZ2luYWxXYXJuID0gY29uc29sZS53YXJuO1xyXG5cclxuYmVmb3JlQWxsKCgpID0+IHtcclxuICBjb25zb2xlLmVycm9yID0gKC4uLmFyZ3MpID0+IHtcclxuICAgIGlmIChcclxuICAgICAgdHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnICYmXHJcbiAgICAgIGFyZ3NbMF0uaW5jbHVkZXMoJ1dhcm5pbmc6IFJlYWN0RE9NLnJlbmRlcicpXHJcbiAgICApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgb3JpZ2luYWxFcnJvci5jYWxsKGNvbnNvbGUsIC4uLmFyZ3MpO1xyXG4gIH07XHJcbiAgXHJcbiAgY29uc29sZS53YXJuID0gKC4uLmFyZ3MpID0+IHtcclxuICAgIGlmIChcclxuICAgICAgdHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnICYmXHJcbiAgICAgIGFyZ3NbMF0uaW5jbHVkZXMoJ2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnKVxyXG4gICAgKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIG9yaWdpbmFsV2Fybi5jYWxsKGNvbnNvbGUsIC4uLmFyZ3MpO1xyXG4gIH07XHJcbn0pO1xyXG5cclxuYWZ0ZXJBbGwoKCkgPT4ge1xyXG4gIGNvbnNvbGUuZXJyb3IgPSBvcmlnaW5hbEVycm9yO1xyXG4gIGNvbnNvbGUud2FybiA9IG9yaWdpbmFsV2FybjtcclxufSk7Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBQSxNQUFNLENBQUNDLHFCQUFxQixHQUFHLFVBQUNDLFFBQVEsRUFBSztFQUMzQ0MsVUFBVSxDQUFDRCxRQUFRLEVBQUUsQ0FBQyxDQUFDO0FBQ3pCLENBQUM7QUFFREYsTUFBTSxDQUFDSSxvQkFBb0IsR0FBRyxVQUFDQyxFQUFFLEVBQUs7RUFDcENDLFlBQVksQ0FBQ0QsRUFBRSxDQUFDO0FBQ2xCLENBQUM7O0FBRUQ7QUFDQUUsaUJBQWlCLENBQUNDLFNBQVMsQ0FBQ0MsVUFBVSxHQUFHQyxJQUFJLENBQUNDLEVBQUUsQ0FBQztFQUFBLE9BQU87SUFDdERDLFNBQVMsRUFBRUYsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztJQUNwQkUsUUFBUSxFQUFFSCxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQ25CRyxVQUFVLEVBQUVKLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDckJJLFNBQVMsRUFBRUwsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztJQUNwQkssTUFBTSxFQUFFTixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQ2pCTSxNQUFNLEVBQUVQLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDakJPLFNBQVMsRUFBRVIsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztJQUNwQlEsTUFB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