163a88557f5762c7107f40914206190a
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _usePerformanceMonitor = require("../../utils/hooks/usePerformanceMonitor");
var _useSmartDefaults = require("../../utils/hooks/useSmartDefaults");
var _accessibility = require("../../utils/accessibility");
var _themes = require("../../utils/themes");
var _DataNetwork = require("./DataNetwork.types");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
const DataNetwork = /*#__PURE__*/(0, _react.forwardRef)((props, ref) => {
  // Extract props with smart defaults
  const {
    // Resolved props from smart defaults
    width,
    height,
    className,
    style,
    nodeCount,
    animationSpeed,
    connectionDistance,
    nodeRadius,
    lineWidth,
    nodeColor,
    lineColor,
    backgroundColor,
    opacity,
    preset,
    theme,
    performanceTier,
    performance,
    analytics,
    maxFPS,
    enableGPUAcceleration,
    accessibility,
    ariaLabel,
    staticMode,
    reducedMotion,
    context,
    interactive,
    pauseOnHover,
    autoPlay,
    onPerformanceChange,
    onThemeChange,
    onAnimationComplete,
    onError,
    debug,
    showStats,
    validateProps,
    // Smart defaults computed values
    deviceCapabilities,
    motionPreferences: smartMotionPreferences,
    effectiveReducedMotion,
    isAnimationDisabled: smartIsAnimationDisabled,
    performanceImpact,
    validationWarnings,
    shouldUseStaticRendering,
    canUseGPUAcceleration
  } = (0, _useSmartDefaults.useSmartDefaults)(props);
  // Component refs
  const canvasRef = (0, _react.useRef)(null);
  const animationRef = (0, _react.useRef)(null);
  const nodesRef = (0, _react.useRef)([]);
  const frameCountRef = (0, _react.useRef)(0);
  const lastFrameTimeRef = (0, _react.useRef)(0);
  const isPlayingRef = (0, _react.useRef)(autoPlay);
  const statsRef = (0, _react.useRef)({
    fps: 0,
    frameTime: 0,
    nodeUpdates: 0
  });

  // Component state
  const [canvasSize, setCanvasSize] = (0, _react.useState)({
    width: 0,
    height: 0
  });
  const [motionPreferences, setMotionPreferences] = (0, _react.useState)(smartMotionPreferences);
  const [currentTheme, setCurrentTheme] = (0, _react.useState)(null);
  const [isPaused, setIsPaused] = (0, _react.useState)(!autoPlay);
  const [isHovered, setIsHovered] = (0, _react.useState)(false);
  const [animationCycles, setAnimationCycles] = (0, _react.useState)(0);

  // Performance monitoring integration
  const {
    recordFrame,
    optimalSettings,
    performanceLevel,
    deviceCapabilities: monitorDeviceCapabilities
  } = (0, _usePerformanceMonitor.usePerformanceMonitor)(performance === 'auto' || analytics || showStats);

  // Use monitor device capabilities if available, otherwise use smart defaults
  const effectiveDeviceCapabilities = monitorDeviceCapabilities || deviceCapabilities;

  // Accessibility settings override
  const accessibilitySettings = accessibility === 'respect-motion' ? (0, _accessibility.getAccessibilitySettings)(motionPreferences) : null;

  // Determine if animation should be disabled (including static mode)
  const isAnimationDisabled = smartIsAnimationDisabled || staticMode || shouldUseStaticRendering();

  // Validate props in development
  (0, _react.useEffect)(() => {
    if (validateProps && process.env.NODE_ENV === 'development') {
      const {
        errors,
        warnings
      } = (0, _DataNetwork.validateDataNetworkProps)(props);
      if (errors.length > 0) {
        errors.forEach(error => console.error(`[DataNetwork] ${error}`));
        if (onError) {
          onError(new Error(`Prop validation failed: ${errors.join(', ')}`));
        }
      }
      if (warnings.length > 0 || validationWarnings.length > 0) {
        [...warnings, ...validationWarnings].forEach(warning => console.warn(`[DataNetwork] ${warning}`));
      }
    }
  }, [validateProps, props, validationWarnings, onError]);

  // Resolve theme configuration with auto-detection
  (0, _react.useEffect)(() => {
    const resolvedTheme = (0, _themes.resolveThemeConfig)(preset, theme);
    setCurrentTheme(resolvedTheme);

    // Set up theme listener for auto theme
    if (theme === 'auto') {
      const removeThemeListener = (0, _themes.createThemeListener)(({
        autoTheme
      }) => {
        if (autoTheme) {
          setCurrentTheme(autoTheme);
        } else {
          // Fallback to preset if no CSS variables detected
          setCurrentTheme((0, _themes.resolveThemeConfig)(preset, 'default'));
        }
      });
      return removeThemeListener;
    }
  }, [preset, theme]);

  // Apply theme values with prop overrides and opacity
  const effectiveNodeColor = nodeColor || currentTheme?.nodeColor || '#ffffff';
  const effectiveLineColor = lineColor || currentTheme?.lineColor || 'rgba(255, 255, 255, 0.1)';
  const effectiveBackgroundColor = backgroundColor !== 'transparent' ? backgroundColor : currentTheme?.backgroundColor || 'transparent';
  const effectiveOpacity = opacity;

  // Apply accessibility settings with fallbacks
  const getEffectiveValue = (userValue, autoValue, accessibilityValue, defaultValue) => {
    if (userValue !== undefined) return userValue;
    if (accessibilitySettings && accessibilityValue !== undefined) return accessibilityValue;
    if (performance === 'auto') return autoValue;
    return defaultValue;
  };
  const effectiveNodeCount = getEffectiveValue(nodeCount, optimalSettings.nodeCount, accessibilitySettings?.nodeCount, 50);
  const effectiveAnimationSpeed = getEffectiveValue(animationSpeed, optimalSettings.animationSpeed, accessibilitySettings?.animationSpeed, 0.5);
  const effectiveConnectionDistance = getEffectiveValue(connectionDistance, optimalSettings.connectionDistance, accessibilitySettings?.connectionDistance, 120);

  // Notify performance changes
  (0, _react.useEffect)(() => {
    if (onPerformanceChange && performanceLevel) {
      onPerformanceChange({
        level: performanceLevel,
        tier: performanceTier,
        fps: statsRef.current.fps,
        impact: performanceImpact,
        deviceCapabilities: effectiveDeviceCapabilities
      });
    }
  }, [performanceLevel, performanceTier, onPerformanceChange, performanceImpact, effectiveDeviceCapabilities]);

  // Notify theme changes
  (0, _react.useEffect)(() => {
    if (onThemeChange && currentTheme) {
      onThemeChange({
        theme: currentTheme,
        preset: preset,
        mode: theme
      });
    }
  }, [currentTheme, preset, theme, onThemeChange]);

  // Listen for motion preference changes
  (0, _react.useEffect)(() => {
    if (accessibility === 'respect-motion') {
      const removeListener = (0, _accessibility.createMotionListener)(prefersReduced => {
        setMotionPreferences(prev => _objectSpread(_objectSpread({}, prev), {}, {
          prefersReducedMotion: prefersReduced,
          respectMotion: prefersReduced
        }));
      });
      return removeListener;
    }
  }, [accessibility]);

  // Initialize nodes with accessibility considerations
  const initializeNodes = (0, _react.useCallback)((canvasWidth, canvasHeight, count) => {
    const nodes = [];
    for (let i = 0; i < count; i++) {
      const radiusRange = nodeRadius.max - nodeRadius.min;
      nodes.push({
        x: Math.random() * canvasWidth,
        y: Math.random() * canvasHeight,
        vx: (Math.random() - 0.5) * effectiveAnimationSpeed,
        vy: (Math.random() - 0.5) * effectiveAnimationSpeed,
        radius: Math.random() * radiusRange + nodeRadius.min
      });
    }
    return nodes;
  }, [effectiveAnimationSpeed, nodeRadius]);

  // Enhanced animation loop with FPS limiting
  const animate = (0, _react.useCallback)(currentTime => {
    if (isAnimationDisabled || !isPlayingRef.current) return;

    // FPS limiting
    if (lastFrameTimeRef.current) {
      const deltaTime = currentTime - lastFrameTimeRef.current;
      const targetFrameTime = 1000 / maxFPS;
      if (deltaTime < targetFrameTime) {
        animationRef.current = requestAnimationFrame(animate);
        return;
      }

      // Update stats
      if (showStats || analytics) {
        statsRef.current.fps = Math.round(1000 / deltaTime);
        statsRef.current.frameTime = deltaTime;
      }
    }
    lastFrameTimeRef.current = currentTime;
    frameCountRef.current++;
    const canvas = canvasRef.current;
    if (!canvas) return;
    const ctx = canvas.getContext('2d');
    const {
      width: canvasWidth,
      height: canvasHeight
    } = canvas;

    // Record frame for performance monitoring
    if (performance === 'auto' || analytics) {
      recordFrame();
    }

    // Clear canvas
    ctx.clearRect(0, 0, canvasWidth, canvasHeight);

    // Apply GPU acceleration if supported
    if (enableGPUAcceleration && canUseGPUAcceleration()) {
      ctx.imageSmoothingEnabled = false;
      canvas.style.willChange = 'transform';
    }

    // Apply global opacity
    const globalOpacity = (accessibilitySettings?.opacity || 1) * effectiveOpacity;

    // Check if paused by hover
    const shouldAnimate = !isHovered || !pauseOnHover;

    // Update and draw nodes
    let nodeUpdates = 0;
    nodesRef.current.forEach(node => {
      // Update position only if animation is enabled and not paused
      if (!isAnimationDisabled && shouldAnimate) {
        node.x += node.vx;
        node.y += node.vy;

        // Bounce off edges
        if (node.x <= 0 || node.x >= canvasWidth) node.vx *= -1;
        if (node.y <= 0 || node.y >= canvasHeight) node.vy *= -1;

        // Keep nodes in bounds
        node.x = Math.max(node.radius, Math.min(canvasWidth - node.radius, node.x));
        node.y = Math.max(node.radius, Math.min(canvasHeight - node.radius, node.y));
        nodeUpdates++;
      }

      // Draw node with theme colors and accessibility opacity
      ctx.globalAlpha = globalOpacity;
      ctx.beginPath();
      ctx.arc(node.x, node.y, node.radius, 0, Math.PI * 2);
      ctx.fillStyle = effectiveNodeColor;
      ctx.fill();
    });

    // Draw connections with theme colors and accessibility considerations
    ctx.strokeStyle = effectiveLineColor;
    ctx.lineWidth = lineWidth;
    ctx.globalAlpha = globalOpacity * 0.3;
    const maxConnections = effectiveDeviceCapabilities.isHighPerformance ? nodesRef.current.length : Math.min(nodesRef.current.length, 30);
    for (let i = 0; i < maxConnections; i++) {
      for (let j = i + 1; j < nodesRef.current.length; j++) {
        const nodeA = nodesRef.current[i];
        const nodeB = nodesRef.current[j];
        const distance = Math.sqrt(Math.pow(nodeA.x - nodeB.x, 2) + Math.pow(nodeA.y - nodeB.y, 2));
        if (distance < effectiveConnectionDistance) {
          const opacity = 1 - distance / effectiveConnectionDistance;
          ctx.globalAlpha = opacity * 0.3 * globalOpacity;
          ctx.beginPath();
          ctx.moveTo(nodeA.x, nodeA.y);
          ctx.lineTo(nodeB.x, nodeB.y);
          ctx.stroke();
        }
      }
    }
    ctx.globalAlpha = 1;

    // Update stats
    if (showStats || analytics) {
      statsRef.current.nodeUpdates = nodeUpdates;
    }

    // Check for animation cycle completion
    if (frameCountRef.current % (60 * 5) === 0) {
      // Every 5 seconds at 60fps
      setAnimationCycles(prev => prev + 1);
      if (onAnimationComplete) {
        onAnimationComplete({
          cycles: animationCycles + 1,
          performance: statsRef.current
        });
      }
    }
    if (!isAnimationDisabled && isPlayingRef.current) {
      animationRef.current = requestAnimationFrame(animate);
    }
  }, [effectiveNodeColor, effectiveLineColor, effectiveConnectionDistance, lineWidth, recordFrame, effectiveDeviceCapabilities, performance, analytics, showStats, isAnimationDisabled, accessibilitySettings, effectiveOpacity, maxFPS, enableGPUAcceleration, canUseGPUAcceleration, pauseOnHover, isHovered, onAnimationComplete, animationCycles]);

  // Render static version for disabled animation
  const renderStatic = (0, _react.useCallback)(() => {
    const canvas = canvasRef.current;
    if (!canvas || !isAnimationDisabled) return;
    const ctx = canvas.getContext('2d');
    const {
      width: canvasWidth,
      height: canvasHeight
    } = canvas;
    ctx.clearRect(0, 0, canvasWidth, canvasHeight);
    const globalOpacity = accessibilitySettings?.opacity || 0.5;

    // Draw static nodes with theme colors
    nodesRef.current.forEach(node => {
      ctx.globalAlpha = globalOpacity;
      ctx.beginPath();
      ctx.arc(node.x, node.y, node.radius, 0, Math.PI * 2);
      ctx.fillStyle = effectiveNodeColor;
      ctx.fill();
    });
    ctx.globalAlpha = 1;
  }, [effectiveNodeColor, isAnimationDisabled, accessibilitySettings]);

  // Handle canvas resize with accessibility
  const handleResize = (0, _react.useCallback)(() => {
    const canvas = canvasRef.current;
    if (!canvas || !canvas.parentElement) return;
    const container = canvas.parentElement;
    const rect = container.getBoundingClientRect();
    const devicePixelRatio = effectiveDeviceCapabilities.isHighPerformance && enableGPUAcceleration ? window.devicePixelRatio || 1 : 1;
    const displayWidth = rect.width;
    const displayHeight = rect.height;
    const canvasWidth = displayWidth * devicePixelRatio;
    const canvasHeight = displayHeight * devicePixelRatio;
    canvas.width = canvasWidth;
    canvas.height = canvasHeight;
    canvas.style.width = `${displayWidth}px`;
    canvas.style.height = `${displayHeight}px`;
    const ctx = canvas.getContext('2d');
    ctx.scale(devicePixelRatio, devicePixelRatio);
    setCanvasSize({
      width: displayWidth,
      height: displayHeight
    });

    // Reinitialize nodes
    nodesRef.current = initializeNodes(displayWidth, displayHeight, effectiveNodeCount);

    // Render static if animation disabled
    if (isAnimationDisabled) {
      renderStatic();
    }
  }, [initializeNodes, effectiveNodeCount, effectiveDeviceCapabilities, isAnimationDisabled, renderStatic, enableGPUAcceleration]);

  // Setup canvas and animation with accessibility
  (0, _react.useEffect)(() => {
    handleResize();
    window.addEventListener('resize', handleResize);

    // Start animation or render static
    if (isAnimationDisabled) {
      renderStatic();
    } else if (autoPlay && !isPaused) {
      isPlayingRef.current = true;
      animationRef.current = requestAnimationFrame(animate);
    }
    return () => {
      window.removeEventListener('resize', handleResize);
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
      }
    };
  }, [handleResize, animate, isAnimationDisabled, renderStatic, autoPlay, isPaused]);

  // Public API methods
  (0, _react.useImperativeHandle)(ref, () => ({
    play: () => {
      if (!isAnimationDisabled) {
        setIsPaused(false);
        isPlayingRef.current = true;
        if (!animationRef.current) {
          animationRef.current = requestAnimationFrame(animate);
        }
        (0, _accessibility.announceToScreenReader)('Animation started');
      }
    },
    pause: () => {
      setIsPaused(true);
      isPlayingRef.current = false;
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
        animationRef.current = null;
      }
      (0, _accessibility.announceToScreenReader)('Animation paused');
    },
    toggle: () => {
      if (isPaused || !isPlayingRef.current) {
        ref.current.play();
      } else {
        ref.current.pause();
      }
    },
    reset: () => {
      const canvas = canvasRef.current;
      if (canvas) {
        nodesRef.current = initializeNodes(canvasSize.width, canvasSize.height, effectiveNodeCount);
        if (isAnimationDisabled) {
          renderStatic();
        }
      }
    },
    getStats: () => statsRef.current,
    getPerformanceInfo: () => ({
      tier: performanceTier,
      level: performanceLevel,
      impact: performanceImpact,
      deviceCapabilities: effectiveDeviceCapabilities
    }),
    updateTheme: newTheme => {
      setCurrentTheme((0, _themes.resolveThemeConfig)(preset, newTheme));
    }
  }), [isAnimationDisabled, animate, isPaused, initializeNodes, canvasSize, effectiveNodeCount, renderStatic, performanceTier, performanceLevel, performanceImpact, effectiveDeviceCapabilities, preset]);

  // Interactive handlers
  const handleMouseEnter = (0, _react.useCallback)(() => {
    if (interactive || pauseOnHover) {
      setIsHovered(true);
    }
  }, [interactive, pauseOnHover]);
  const handleMouseLeave = (0, _react.useCallback)(() => {
    if (interactive || pauseOnHover) {
      setIsHovered(false);
    }
  }, [interactive, pauseOnHover]);

  // Error boundary for canvas operations
  (0, _react.useEffect)(() => {
    const handleCanvasError = error => {
      console.error('[DataNetwork] Canvas error:', error);
      if (onError) {
        onError(error);
      }
    };
    window.addEventListener('error', handleCanvasError);
    return () => window.removeEventListener('error', handleCanvasError);
  }, [onError]);

  // Enhanced debug info with comprehensive stats
  const debugInfo = (analytics || debug || showStats) && /*#__PURE__*/_react.default.createElement("div", {
    style: {
      position: 'absolute',
      top: '10px',
      left: '10px',
      background: 'rgba(0,0,0,0.7)',
      color: 'white',
      padding: '8px',
      borderRadius: '4px',
      fontSize: '12px',
      fontFamily: 'monospace',
      pointerEvents: 'none',
      zIndex: 10,
      maxWidth: '300px'
    }
  }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("strong", null, "Performance"), /*#__PURE__*/_react.default.createElement("br", null), "Level: ", performanceLevel, " | Tier: ", performanceTier, /*#__PURE__*/_react.default.createElement("br", null), "FPS: ", statsRef.current.fps, " | Frame Time: ", statsRef.current.frameTime.toFixed(2), "ms", /*#__PURE__*/_react.default.createElement("br", null), "Nodes: ", effectiveNodeCount, " | Updates/Frame: ", statsRef.current.nodeUpdates), debug && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    style: {
      marginTop: '8px'
    }
  }, /*#__PURE__*/_react.default.createElement("strong", null, "Device"), /*#__PURE__*/_react.default.createElement("br", null), "Type: ", effectiveDeviceCapabilities.isHighPerformance ? 'High-end' : 'Standard', /*#__PURE__*/_react.default.createElement("br", null), "Mobile: ", effectiveDeviceCapabilities.isMobile ? 'Yes' : 'No', /*#__PURE__*/_react.default.createElement("br", null), "GPU Accel: ", enableGPUAcceleration && canUseGPUAcceleration() ? 'On' : 'Off'), /*#__PURE__*/_react.default.createElement("div", {
    style: {
      marginTop: '8px'
    }
  }, /*#__PURE__*/_react.default.createElement("strong", null, "Animation"), /*#__PURE__*/_react.default.createElement("br", null), "State: ", isAnimationDisabled ? 'Disabled' : isPaused ? 'Paused' : 'Playing', /*#__PURE__*/_react.default.createElement("br", null), "Motion: ", motionPreferences.prefersReducedMotion ? 'Reduced' : 'Normal', /*#__PURE__*/_react.default.createElement("br", null), "Cycles: ", animationCycles)), showStats && /*#__PURE__*/_react.default.createElement("div", {
    style: {
      marginTop: '8px'
    }
  }, /*#__PURE__*/_react.default.createElement("strong", null, "Theme"), /*#__PURE__*/_react.default.createElement("br", null), "Mode: ", theme, " | Preset: ", preset, /*#__PURE__*/_react.default.createElement("br", null), "Context: ", context, /*#__PURE__*/_react.default.createElement("br", null), "Impact: ", performanceImpact.level, " (", performanceImpact.score.toFixed(0), "/100)"));
  return /*#__PURE__*/_react.default.createElement("div", {
    className: className,
    style: _objectSpread({
      width,
      height,
      position: 'relative',
      overflow: 'hidden',
      backgroundColor: effectiveBackgroundColor
    }, style),
    role: "img",
    "aria-label": ariaLabel,
    "aria-live": isAnimationDisabled ? 'off' : 'polite',
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave
  }, /*#__PURE__*/_react.default.createElement("canvas", {
    ref: canvasRef,
    style: {
      position: 'absolute',
      top: 0,
      left: 0,
      width: '100%',
      height: '100%'
    },
    "aria-hidden": "true"
  }), debugInfo);
});

// Display name for debugging
DataNetwork.displayName = 'DataNetwork';

// PropTypes
DataNetwork.propTypes = _DataNetwork.DataNetworkPropTypes;

// Default props
DataNetwork.defaultProps = _DataNetwork.DataNetworkDefaultProps;
var _default = exports.default = DataNetwork;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,