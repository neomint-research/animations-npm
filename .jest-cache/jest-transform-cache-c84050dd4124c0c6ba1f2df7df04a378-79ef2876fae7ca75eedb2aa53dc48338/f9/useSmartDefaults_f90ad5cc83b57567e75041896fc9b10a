d44946b9b1dfeffb298954907f21e591
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSmartDefaults = exports.selectPerformanceTier = exports.getOptimalSettingsForContext = void 0;
var _react = require("react");
var _performance = require("../performance");
var _themes = require("../themes");
var _accessibility = require("../accessibility");
var _DataNetwork = require("../../components/DataNetwork/DataNetwork.types");
const _excluded = ["nodeCount", "animationSpeed", "connectionDistance", "nodeRadius", "lineWidth", "opacity", "maxFPS", "context", "performanceTier", "performance", "accessibility", "reducedMotion", "preset", "theme", "enableGPUAcceleration"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }
/**
 * Smart defaults hook for DataNetwork component
 * Intelligently resolves prop values based on device capabilities, context, and user preferences
 */
const useSmartDefaults = (props = {}) => {
  const {
      // Extract user-provided props
      nodeCount: userNodeCount,
      animationSpeed: userAnimationSpeed,
      connectionDistance: userConnectionDistance,
      nodeRadius: userNodeRadius,
      lineWidth: userLineWidth,
      opacity: userOpacity,
      maxFPS: userMaxFPS,
      // Context and configuration
      context = _DataNetwork.DataNetworkContextTypes.GENERAL,
      performanceTier: userPerformanceTier,
      performance = 'auto',
      accessibility = 'respect-motion',
      reducedMotion: userReducedMotion,
      preset,
      theme,
      // Feature flags
      enableGPUAcceleration: userEnableGPU
    } = props,
    restProps = _objectWithoutProperties(props, _excluded);

  // Memoize device capabilities detection
  const deviceCapabilities = (0, _react.useMemo)(() => (0, _performance.detectDeviceCapabilities)(), []);

  // Memoize motion preferences
  const motionPreferences = (0, _react.useMemo)(() => (0, _accessibility.detectMotionPreferences)(), []);

  // Determine effective reduced motion preference
  const effectiveReducedMotion = userReducedMotion !== undefined ? userReducedMotion : motionPreferences.prefersReducedMotion;

  // Calculate optimal performance tier
  const optimalPerformanceTier = (0, _react.useMemo)(() => {
    // User override takes precedence
    if (userPerformanceTier && userPerformanceTier !== _DataNetwork.DataNetworkPerformanceTiers.AUTO) {
      return userPerformanceTier;
    }

    // Check accessibility requirements first
    if (accessibility === 'respect-motion' && effectiveReducedMotion) {
      return _DataNetwork.DataNetworkPerformanceTiers.MINIMAL;
    }

    // Auto-detect based on device and context
    if (performance === 'auto') {
      const tierPreset = (0, _themes.getOptimalPerformanceTier)(deviceCapabilities, context);

      // Map theme preset to performance tier
      if (tierPreset === 'desktopHeavy') return _DataNetwork.DataNetworkPerformanceTiers.HIGH;
      if (tierPreset === 'desktopStandard') return _DataNetwork.DataNetworkPerformanceTiers.MEDIUM;
      if (tierPreset === 'mobileLight') return _DataNetwork.DataNetworkPerformanceTiers.LOW;
      if (tierPreset === 'mobileMinimal') return _DataNetwork.DataNetworkPerformanceTiers.MINIMAL;
      if (tierPreset === 'accessibilitySafe') return _DataNetwork.DataNetworkPerformanceTiers.MINIMAL;
      return _DataNetwork.DataNetworkPerformanceTiers.MEDIUM;
    }
    return _DataNetwork.DataNetworkPerformanceTiers.MEDIUM;
  }, [userPerformanceTier, performance, deviceCapabilities, context, accessibility, effectiveReducedMotion]);

  // Get context-based defaults
  const contextConfig = _DataNetwork.contextDefaults[context] || _DataNetwork.contextDefaults[_DataNetwork.DataNetworkContextTypes.GENERAL];

  // Get performance tier defaults
  const performanceConfig = _DataNetwork.performanceDefaults[optimalPerformanceTier] || _DataNetwork.performanceDefaults[_DataNetwork.DataNetworkPerformanceTiers.MEDIUM];

  // Get accessibility settings if needed
  const accessibilityConfig = (0, _react.useMemo)(() => {
    if (accessibility === 'respect-motion' && effectiveReducedMotion) {
      return (0, _accessibility.getAccessibilitySettings)({
        prefersReducedMotion: true
      });
    }
    return null;
  }, [accessibility, effectiveReducedMotion]);

  // Get device-optimized settings
  const deviceOptimalSettings = (0, _react.useMemo)(() => {
    if (performance === 'auto') {
      return (0, _performance.getOptimalSettings)(deviceCapabilities);
    }
    return null;
  }, [performance, deviceCapabilities]);

  // Smart resolution logic - prioritize in this order:
  // 1. User-provided values
  // 2. Accessibility requirements
  // 3. Performance tier settings
  // 4. Context-specific defaults
  // 5. Device-optimized settings
  // 6. Fallback defaults
  const resolvedDefaults = (0, _react.useMemo)(() => {
    const resolve = (userValue, prop, fallback) => {
      if (userValue !== undefined && userValue !== null) return userValue;
      if (accessibilityConfig && accessibilityConfig[prop] !== undefined) return accessibilityConfig[prop];
      if (performanceConfig[prop] !== undefined) return performanceConfig[prop];
      if (contextConfig[prop] !== undefined) return contextConfig[prop];
      if (deviceOptimalSettings && deviceOptimalSettings[prop] !== undefined) return deviceOptimalSettings[prop];
      return fallback;
    };

    // Node radius resolution
    const resolvedNodeRadius = userNodeRadius || {
      min: optimalPerformanceTier === _DataNetwork.DataNetworkPerformanceTiers.HIGH ? 1 : 0.5,
      max: optimalPerformanceTier === _DataNetwork.DataNetworkPerformanceTiers.HIGH ? 3 : 2
    };

    // GPU acceleration based on device and tier
    const resolvedEnableGPU = userEnableGPU !== undefined ? userEnableGPU : deviceCapabilities.isHighPerformance && optimalPerformanceTier !== _DataNetwork.DataNetworkPerformanceTiers.MINIMAL;

    // Opacity resolution with accessibility considerations
    const baseOpacity = resolve(userOpacity, 'opacity', 1);
    const resolvedOpacity = accessibilityConfig?.opacity !== undefined ? Math.min(baseOpacity, accessibilityConfig.opacity) : baseOpacity;
    return {
      nodeCount: resolve(userNodeCount, 'nodeCount', 50),
      animationSpeed: resolve(userAnimationSpeed, 'animationSpeed', 0.5),
      connectionDistance: resolve(userConnectionDistance, 'connectionDistance', 120),
      nodeRadius: resolvedNodeRadius,
      lineWidth: userLineWidth || 1,
      opacity: resolvedOpacity,
      maxFPS: resolve(userMaxFPS, 'maxFPS', 60),
      enableGPUAcceleration: resolvedEnableGPU,
      // Additional computed properties
      performanceTier: optimalPerformanceTier,
      deviceCapabilities,
      motionPreferences,
      effectiveReducedMotion,
      isAnimationDisabled: accessibility === 'disable' || accessibility === 'respect-motion' && effectiveReducedMotion && accessibilityConfig?.disabled,
      // Context and performance info
      context,
      performance,
      accessibility,
      // Theme resolution
      effectivePreset: preset || contextConfig.preset || 'default',
      theme: theme || 'auto'
    };
  }, [userNodeCount, userAnimationSpeed, userConnectionDistance, userNodeRadius, userLineWidth, userOpacity, userMaxFPS, userEnableGPU, optimalPerformanceTier, accessibilityConfig, performanceConfig, contextConfig, deviceOptimalSettings, deviceCapabilities, motionPreferences, effectiveReducedMotion, accessibility, context, performance, preset, theme]);

  // Performance impact calculation
  const performanceImpact = (0, _react.useMemo)(() => {
    const {
      nodeCount,
      animationSpeed,
      connectionDistance
    } = resolvedDefaults;

    // Simple performance score calculation
    const nodeScore = nodeCount / 100 * 30;
    const speedScore = animationSpeed * 40;
    const connectionScore = connectionDistance / 200 * 30;
    const totalScore = nodeScore + speedScore + connectionScore;
    return {
      score: Math.min(100, Math.max(0, totalScore)),
      level: totalScore < 30 ? 'light' : totalScore < 60 ? 'moderate' : 'heavy',
      recommendation: totalScore > 80 ? 'Consider reducing animation complexity for better performance' : null
    };
  }, [resolvedDefaults]);

  // Validation in development
  const validationWarnings = (0, _react.useMemo)(() => {
    if (process.env.NODE_ENV !== 'development') return [];
    const warnings = [];

    // Check for performance conflicts
    if (userPerformanceTier === _DataNetwork.DataNetworkPerformanceTiers.HIGH && deviceCapabilities.isMobile) {
      warnings.push('High performance tier on mobile device may cause performance issues');
    }

    // Check for accessibility conflicts
    if (accessibility === 'disable' && effectiveReducedMotion) {
      warnings.push('Animation disabled but user prefers reduced motion - consider using respect-motion mode');
    }

    // Check for unrealistic values
    if (userNodeCount > 200 && !deviceCapabilities.isHighPerformance) {
      warnings.push('High node count on non-high-performance device may cause lag');
    }
    return warnings;
  }, [userPerformanceTier, deviceCapabilities, accessibility, effectiveReducedMotion, userNodeCount]);
  return _objectSpread(_objectSpread(_objectSpread({}, restProps), resolvedDefaults), {}, {
    performanceImpact,
    validationWarnings,
    // Helper methods
    getRecommendedSettings: () => ({
      nodeCount: performanceConfig.nodeCount,
      animationSpeed: performanceConfig.animationSpeed,
      connectionDistance: performanceConfig.connectionDistance
    }),
    shouldUseStaticRendering: () => {
      return resolvedDefaults.isAnimationDisabled || resolvedDefaults.performanceTier === _DataNetwork.DataNetworkPerformanceTiers.MINIMAL;
    },
    canUseGPUAcceleration: () => {
      return resolvedDefaults.enableGPUAcceleration && deviceCapabilities.isHighPerformance;
    }
  });
};

// Export helper to get optimal settings for a specific context
exports.useSmartDefaults = useSmartDefaults;
const getOptimalSettingsForContext = (context, deviceCapabilities = null) => {
  const caps = deviceCapabilities || (0, _performance.detectDeviceCapabilities)();
  const motionPrefs = (0, _accessibility.detectMotionPreferences)();

  // Get base context config
  const contextConfig = _DataNetwork.contextDefaults[context] || _DataNetwork.contextDefaults[_DataNetwork.DataNetworkContextTypes.GENERAL];

  // Adjust for device capabilities
  if (caps.isMobile || !caps.isHighPerformance) {
    return _objectSpread(_objectSpread({}, contextConfig), {}, {
      nodeCount: Math.floor(contextConfig.nodeCount * 0.6),
      animationSpeed: contextConfig.animationSpeed * 0.7,
      connectionDistance: contextConfig.connectionDistance * 0.8
    });
  }

  // Adjust for motion preferences
  if (motionPrefs.prefersReducedMotion) {
    return _objectSpread(_objectSpread({}, contextConfig), {}, {
      nodeCount: Math.floor(contextConfig.nodeCount * 0.3),
      animationSpeed: contextConfig.animationSpeed * 0.2,
      connectionDistance: contextConfig.connectionDistance * 0.5
    });
  }
  return contextConfig;
};

// Export performance tier selector helper
exports.getOptimalSettingsForContext = getOptimalSettingsForContext;
const selectPerformanceTier = (requirements = {}) => {
  const {
    targetFPS = 30,
    maxNodes = 50,
    deviceCapabilities = (0, _performance.detectDeviceCapabilities)(),
    preferQuality = false
  } = requirements;

  // High performance conditions
  if (deviceCapabilities.isHighPerformance && targetFPS >= 60 && preferQuality) {
    return _DataNetwork.DataNetworkPerformanceTiers.HIGH;
  }

  // Low/Minimal performance conditions
  if (deviceCapabilities.isMobile || targetFPS < 24 || maxNodes < 20) {
    return targetFPS < 15 ? _DataNetwork.DataNetworkPerformanceTiers.MINIMAL : _DataNetwork.DataNetworkPerformanceTiers.LOW;
  }

  // Default to medium
  return _DataNetwork.DataNetworkPerformanceTiers.MEDIUM;
};
exports.selectPerformanceTier = selectPerformanceTier;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX3BlcmZvcm1hbmNlIiwiX3RoZW1lcyIsIl9hY2Nlc3NpYmlsaXR5IiwiX0RhdGFOZXR3b3JrIiwiX2V4Y2x1ZGVkIiwib3duS2V5cyIsImUiLCJyIiwidCIsIk9iamVjdCIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJvIiwiZmlsdGVyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJmb3JFYWNoIiwiX2RlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsIl90b1Byb3BlcnR5S2V5IiwidmFsdWUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImkiLCJfdG9QcmltaXRpdmUiLCJTeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsImNhbGwiLCJUeXBlRXJyb3IiLCJTdHJpbmciLCJOdW1iZXIiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsIm4iLCJpbmRleE9mIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJoYXNPd25Qcm9wZXJ0eSIsInVzZVNtYXJ0RGVmYXVsdHMiLCJwcm9wcyIsIm5vZGVDb3VudCIsInVzZXJOb2RlQ291bnQiLCJhbmltYXRpb25TcGVlZCIsInVzZXJBbmltYXRpb25TcGVlZCIsImNvbm5lY3Rpb25EaXN0YW5jZSIsInVzZXJDb25uZWN0aW9uRGlzdGFuY2UiLCJub2RlUmFkaXVzIiwidXNlck5vZGVSYWRpdXMiLCJsaW5lV2lkdGgiLCJ1c2VyTGluZVdpZHRoIiwib3BhY2l0eSIsInVzZXJPcGFjaXR5IiwibWF4RlBTIiwidXNlck1heEZQUyIsImNvbnRleHQiLCJEYXRhTmV0d29ya0NvbnRleHRUeXBlcyIsIkdFTkVSQUwiLCJwZXJmb3JtYW5jZVRpZXIiLCJ1c2VyUGVyZm9ybWFuY2VUaWVyIiwicGVyZm9ybWFuY2UiLCJhY2Nlc3NpYmlsaXR5IiwicmVkdWNlZE1vdGlvbiIsInVzZXJSZWR1Y2VkTW90aW9uIiwicHJlc2V0IiwidGhlbWUiLCJlbmFibGVHUFVBY2NlbGVyYXRpb24iLCJ1c2VyRW5hYmxlR1BVIiwicmVzdFByb3BzIiwiZGV2aWNlQ2FwYWJpbGl0aWVzIiwidXNlTWVtbyIsImRldGVjdERldmljZUNhcGFiaWxpdGllcyIsIm1vdGlvblByZWZlcmVuY2VzIiwiZGV0ZWN0TW90aW9uUHJlZmVyZW5jZXMiLCJlZmZlY3RpdmVSZWR1Y2VkTW90aW9uIiwidW5kZWZpbmVkIiwicHJlZmVyc1JlZHVjZWRNb3Rpb24iLCJvcHRpbWFsUGVyZm9ybWFuY2VUaWVyIiwiRGF0YU5ldHdvcmtQZXJmb3JtYW5jZVRpZXJzIiwiQVVUTyIsIk1JTklNQUwiLCJ0aWVyUHJlc2V0IiwiZ2V0T3B0aW1hbFBlcmZvcm1hbmNlVGllciIsIkhJR0giLCJNRURJVU0iLCJMT1ciLCJjb250ZXh0Q29uZmlnIiwiY29udGV4dERlZmF1bHRzIiwicGVyZm9ybWFuY2VDb25maWciLCJwZXJmb3JtYW5jZURlZmF1bHRzIiwiYWNjZXNzaWJpbGl0eUNvbmZpZyIsImdldEFjY2Vzc2liaWxpdHlTZXR0aW5ncyIsImRldmljZU9wdGltYWxTZXR0aW5ncyIsImdldE9wdGltYWxTZXR0aW5ncyIsInJlc29sdmVkRGVmYXVsdHMiLCJyZXNvbHZlIiwidXNlclZhbHVlIiwicHJvcCIsImZhbGxiYWNrIiwicmVzb2x2ZWROb2RlUmFkaXVzIiwibWluIiwibWF4IiwicmVzb2x2ZWRFbmFibGVHUFUiLCJpc0hpZ2hQZXJmb3JtYW5jZSIsImJhc2VPcGFjaXR5IiwicmVzb2x2ZWRPcGFjaXR5IiwiTWF0aCIsImlzQW5pbWF0aW9uRGlzYWJsZWQiLCJkaXNhYmxlZCIsImVmZmVjdGl2ZVByZXNldCIsInBlcmZvcm1hbmNlSW1wYWN0Iiwibm9kZVNjb3JlIiwic3BlZWRTY29yZSIsImNvbm5lY3Rpb25TY29yZSIsInRvdGFsU2NvcmUiLCJzY29yZSIsImxldmVsIiwicmVjb21tZW5kYXRpb24iLCJ2YWxpZGF0aW9uV2FybmluZ3MiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJ3YXJuaW5ncyIsImlzTW9iaWxlIiwiZ2V0UmVjb21tZW5kZWRTZXR0aW5ncyIsInNob3VsZFVzZVN0YXRpY1JlbmRlcmluZyIsImNhblVzZUdQVUFjY2VsZXJhdGlvbiIsImV4cG9ydHMiLCJnZXRPcHRpbWFsU2V0dGluZ3NGb3JDb250ZXh0IiwiY2FwcyIsIm1vdGlvblByZWZzIiwiZmxvb3IiLCJzZWxlY3RQZXJmb3JtYW5jZVRpZXIiLCJyZXF1aXJlbWVudHMiLCJ0YXJnZXRGUFMiLCJtYXhOb2RlcyIsInByZWZlclF1YWxpdHkiXSwic291cmNlcyI6WyJ1c2VTbWFydERlZmF1bHRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IGRldGVjdERldmljZUNhcGFiaWxpdGllcywgZ2V0T3B0aW1hbFNldHRpbmdzIH0gZnJvbSAnLi4vcGVyZm9ybWFuY2UnO1xyXG5pbXBvcnQgeyBnZXRPcHRpbWFsUGVyZm9ybWFuY2VUaWVyLCByZXNvbHZlVGhlbWVDb25maWcgfSBmcm9tICcuLi90aGVtZXMnO1xyXG5pbXBvcnQgeyBkZXRlY3RNb3Rpb25QcmVmZXJlbmNlcywgZ2V0QWNjZXNzaWJpbGl0eVNldHRpbmdzIH0gZnJvbSAnLi4vYWNjZXNzaWJpbGl0eSc7XHJcbmltcG9ydCB7IFxyXG4gIGNvbnRleHREZWZhdWx0cywgXHJcbiAgcGVyZm9ybWFuY2VEZWZhdWx0cyxcclxuICBEYXRhTmV0d29ya1BlcmZvcm1hbmNlVGllcnMsXHJcbiAgRGF0YU5ldHdvcmtDb250ZXh0VHlwZXMgXHJcbn0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9EYXRhTmV0d29yay9EYXRhTmV0d29yay50eXBlcyc7XHJcblxyXG4vKipcclxuICogU21hcnQgZGVmYXVsdHMgaG9vayBmb3IgRGF0YU5ldHdvcmsgY29tcG9uZW50XHJcbiAqIEludGVsbGlnZW50bHkgcmVzb2x2ZXMgcHJvcCB2YWx1ZXMgYmFzZWQgb24gZGV2aWNlIGNhcGFiaWxpdGllcywgY29udGV4dCwgYW5kIHVzZXIgcHJlZmVyZW5jZXNcclxuICovXHJcbmV4cG9ydCBjb25zdCB1c2VTbWFydERlZmF1bHRzID0gKHByb3BzID0ge30pID0+IHtcclxuICBjb25zdCB7XHJcbiAgICAvLyBFeHRyYWN0IHVzZXItcHJvdmlkZWQgcHJvcHNcclxuICAgIG5vZGVDb3VudDogdXNlck5vZGVDb3VudCxcclxuICAgIGFuaW1hdGlvblNwZWVkOiB1c2VyQW5pbWF0aW9uU3BlZWQsXHJcbiAgICBjb25uZWN0aW9uRGlzdGFuY2U6IHVzZXJDb25uZWN0aW9uRGlzdGFuY2UsXHJcbiAgICBub2RlUmFkaXVzOiB1c2VyTm9kZVJhZGl1cyxcclxuICAgIGxpbmVXaWR0aDogdXNlckxpbmVXaWR0aCxcclxuICAgIG9wYWNpdHk6IHVzZXJPcGFjaXR5LFxyXG4gICAgbWF4RlBTOiB1c2VyTWF4RlBTLFxyXG4gICAgXHJcbiAgICAvLyBDb250ZXh0IGFuZCBjb25maWd1cmF0aW9uXHJcbiAgICBjb250ZXh0ID0gRGF0YU5ldHdvcmtDb250ZXh0VHlwZXMuR0VORVJBTCxcclxuICAgIHBlcmZvcm1hbmNlVGllcjogdXNlclBlcmZvcm1hbmNlVGllcixcclxuICAgIHBlcmZvcm1hbmNlID0gJ2F1dG8nLFxyXG4gICAgYWNjZXNzaWJpbGl0eSA9ICdyZXNwZWN0LW1vdGlvbicsXHJcbiAgICByZWR1Y2VkTW90aW9uOiB1c2VyUmVkdWNlZE1vdGlvbixcclxuICAgIHByZXNldCxcclxuICAgIHRoZW1lLFxyXG4gICAgXHJcbiAgICAvLyBGZWF0dXJlIGZsYWdzXHJcbiAgICBlbmFibGVHUFVBY2NlbGVyYXRpb246IHVzZXJFbmFibGVHUFUsXHJcbiAgICAuLi5yZXN0UHJvcHNcclxuICB9ID0gcHJvcHM7XHJcblxyXG4gIC8vIE1lbW9pemUgZGV2aWNlIGNhcGFiaWxpdGllcyBkZXRlY3Rpb25cclxuICBjb25zdCBkZXZpY2VDYXBhYmlsaXRpZXMgPSB1c2VNZW1vKCgpID0+IGRldGVjdERldmljZUNhcGFiaWxpdGllcygpLCBbXSk7XHJcbiAgXHJcbiAgLy8gTWVtb2l6ZSBtb3Rpb24gcHJlZmVyZW5jZXNcclxuICBjb25zdCBtb3Rpb25QcmVmZXJlbmNlcyA9IHVzZU1lbW8oKCkgPT4gZGV0ZWN0TW90aW9uUHJlZmVyZW5jZXMoKSwgW10pO1xyXG4gIFxyXG4gIC8vIERldGVybWluZSBlZmZlY3RpdmUgcmVkdWNlZCBtb3Rpb24gcHJlZmVyZW5jZVxyXG4gIGNvbnN0IGVmZmVjdGl2ZVJlZHVjZWRNb3Rpb24gPSB1c2VyUmVkdWNlZE1vdGlvbiAhPT0gdW5kZWZpbmVkIFxyXG4gICAgPyB1c2VyUmVkdWNlZE1vdGlvbiBcclxuICAgIDogbW90aW9uUHJlZmVyZW5jZXMucHJlZmVyc1JlZHVjZWRNb3Rpb247XHJcblxyXG4gIC8vIENhbGN1bGF0ZSBvcHRpbWFsIHBlcmZvcm1hbmNlIHRpZXJcclxuICBjb25zdCBvcHRpbWFsUGVyZm9ybWFuY2VUaWVyID0gdXNlTWVtbygoKSA9PiB7XHJcbiAgICAvLyBVc2VyIG92ZXJyaWRlIHRha2VzIHByZWNlZGVuY2VcclxuICAgIGlmICh1c2VyUGVyZm9ybWFuY2VUaWVyICYmIHVzZXJQZXJmb3JtYW5jZVRpZXIgIT09IERhdGFOZXR3b3JrUGVyZm9ybWFuY2VUaWVycy5BVVRPKSB7XHJcbiAgICAgIHJldHVybiB1c2VyUGVyZm9ybWFuY2VUaWVyO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBDaGVjayBhY2Nlc3NpYmlsaXR5IHJlcXVpcmVtZW50cyBmaXJzdFxyXG4gICAgaWYgKGFjY2Vzc2liaWxpdHkgPT09ICdyZXNwZWN0LW1vdGlvbicgJiYgZWZmZWN0aXZlUmVkdWNlZE1vdGlvbikge1xyXG4gICAgICByZXR1cm4gRGF0YU5ldHdvcmtQZXJmb3JtYW5jZVRpZXJzLk1JTklNQUw7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIEF1dG8tZGV0ZWN0IGJhc2VkIG9uIGRldmljZSBhbmQgY29udGV4dFxyXG4gICAgaWYgKHBlcmZvcm1hbmNlID09PSAnYXV0bycpIHtcclxuICAgICAgY29uc3QgdGllclByZXNldCA9IGdldE9wdGltYWxQZXJmb3JtYW5jZVRpZXIoZGV2aWNlQ2FwYWJpbGl0aWVzLCBjb250ZXh0KTtcclxuICAgICAgXHJcbiAgICAgIC8vIE1hcCB0aGVtZSBwcmVzZXQgdG8gcGVyZm9ybWFuY2UgdGllclxyXG4gICAgICBpZiAodGllclByZXNldCA9PT0gJ2Rlc2t0b3BIZWF2eScpIHJldHVybiBEYXRhTmV0d29ya1BlcmZvcm1hbmNlVGllcnMuSElHSDtcclxuICAgICAgaWYgKHRpZXJQcmVzZXQgPT09ICdkZXNrdG9wU3RhbmRhcmQnKSByZXR1cm4gRGF0YU5ldHdvcmtQZXJmb3JtYW5jZVRpZXJzLk1FRElVTTtcclxuICAgICAgaWYgKHRpZXJQcmVzZXQgPT09ICdtb2JpbGVMaWdodCcpIHJldHVybiBEYXRhTmV0d29ya1BlcmZvcm1hbmNlVGllcnMuTE9XO1xyXG4gICAgICBpZiAodGllclByZXNldCA9PT0gJ21vYmlsZU1pbmltYWwnKSByZXR1cm4gRGF0YU5ldHdvcmtQZXJmb3JtYW5jZVRpZXJzLk1JTklNQUw7XHJcbiAgICAgIGlmICh0aWVyUHJlc2V0ID09PSAnYWNjZXNzaWJpbGl0eVNhZmUnKSByZXR1cm4gRGF0YU5ldHdvcmtQZXJmb3JtYW5jZVRpZXJzLk1JTklNQUw7XHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4gRGF0YU5ldHdvcmtQZXJmb3JtYW5jZVRpZXJzLk1FRElVTTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIERhdGFOZXR3b3JrUGVyZm9ybWFuY2VUaWVycy5NRURJVU07XHJcbiAgfSwgW3VzZXJQZXJmb3JtYW5jZVRpZXIsIHBlcmZvcm1hbmNlLCBkZXZpY2VDYXBhYmlsaXRpZXMsIGNvbnRleHQsIGFjY2Vzc2liaWxpdHksIGVmZmVjdGl2ZVJlZHVjZWRNb3Rpb25dKTtcclxuXHJcbiAgLy8gR2V0IGNvbnRleHQtYmFzZWQgZGVmYXVsdHNcclxuICBjb25zdCBjb250ZXh0Q29uZmlnID0gY29udGV4dERlZmF1bHRzW2NvbnRleHRdIHx8IGNvbnRleHREZWZhdWx0c1tEYXRhTmV0d29ya0NvbnRleHRUeXBlcy5HRU5FUkFMXTtcclxuICBcclxuICAvLyBHZXQgcGVyZm9ybWFuY2UgdGllciBkZWZhdWx0c1xyXG4gIGNvbnN0IHBlcmZvcm1hbmNlQ29uZmlnID0gcGVyZm9ybWFuY2VEZWZhdWx0c1tvcHRpbWFsUGVyZm9ybWFuY2VUaWVyXSB8fCBwZXJmb3JtYW5jZURlZmF1bHRzW0RhdGFOZXR3b3JrUGVyZm9ybWFuY2VUaWVycy5NRURJVU1dO1xyXG4gIFxyXG4gIC8vIEdldCBhY2Nlc3NpYmlsaXR5IHNldHRpbmdzIGlmIG5lZWRlZFxyXG4gIGNvbnN0IGFjY2Vzc2liaWxpdHlDb25maWcgPSB1c2VNZW1vKCgpID0+IHtcclxuICAgIGlmIChhY2Nlc3NpYmlsaXR5ID09PSAncmVzcGVjdC1tb3Rpb24nICYmIGVmZmVjdGl2ZVJlZHVjZWRNb3Rpb24pIHtcclxuICAgICAgcmV0dXJuIGdldEFjY2Vzc2liaWxpdHlTZXR0aW5ncyh7IHByZWZlcnNSZWR1Y2VkTW90aW9uOiB0cnVlIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfSwgW2FjY2Vzc2liaWxpdHksIGVmZmVjdGl2ZVJlZHVjZWRNb3Rpb25dKTtcclxuXHJcbiAgLy8gR2V0IGRldmljZS1vcHRpbWl6ZWQgc2V0dGluZ3NcclxuICBjb25zdCBkZXZpY2VPcHRpbWFsU2V0dGluZ3MgPSB1c2VNZW1vKCgpID0+IHtcclxuICAgIGlmIChwZXJmb3JtYW5jZSA9PT0gJ2F1dG8nKSB7XHJcbiAgICAgIHJldHVybiBnZXRPcHRpbWFsU2V0dGluZ3MoZGV2aWNlQ2FwYWJpbGl0aWVzKTtcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG4gIH0sIFtwZXJmb3JtYW5jZSwgZGV2aWNlQ2FwYWJpbGl0aWVzXSk7XHJcblxyXG4gIC8vIFNtYXJ0IHJlc29sdXRpb24gbG9naWMgLSBwcmlvcml0aXplIGluIHRoaXMgb3JkZXI6XHJcbiAgLy8gMS4gVXNlci1wcm92aWRlZCB2YWx1ZXNcclxuICAvLyAyLiBBY2Nlc3NpYmlsaXR5IHJlcXVpcmVtZW50c1xyXG4gIC8vIDMuIFBlcmZvcm1hbmNlIHRpZXIgc2V0dGluZ3NcclxuICAvLyA0LiBDb250ZXh0LXNwZWNpZmljIGRlZmF1bHRzXHJcbiAgLy8gNS4gRGV2aWNlLW9wdGltaXplZCBzZXR0aW5nc1xyXG4gIC8vIDYuIEZhbGxiYWNrIGRlZmF1bHRzXHJcbiAgY29uc3QgcmVzb2x2ZWREZWZhdWx0cyA9IHVzZU1lbW8oKCkgPT4ge1xyXG4gICAgY29uc3QgcmVzb2x2ZSA9ICh1c2VyVmFsdWUsIHByb3AsIGZhbGxiYWNrKSA9PiB7XHJcbiAgICAgIGlmICh1c2VyVmFsdWUgIT09IHVuZGVmaW5lZCAmJiB1c2VyVmFsdWUgIT09IG51bGwpIHJldHVybiB1c2VyVmFsdWU7XHJcbiAgICAgIGlmIChhY2Nlc3NpYmlsaXR5Q29uZmlnICYmIGFjY2Vzc2liaWxpdHlDb25maWdbcHJvcF0gIT09IHVuZGVmaW5lZCkgcmV0dXJuIGFjY2Vzc2liaWxpdHlDb25maWdbcHJvcF07XHJcbiAgICAgIGlmIChwZXJmb3JtYW5jZUNvbmZpZ1twcm9wXSAhPT0gdW5kZWZpbmVkKSByZXR1cm4gcGVyZm9ybWFuY2VDb25maWdbcHJvcF07XHJcbiAgICAgIGlmIChjb250ZXh0Q29uZmlnW3Byb3BdICE9PSB1bmRlZmluZWQpIHJldHVybiBjb250ZXh0Q29uZmlnW3Byb3BdO1xyXG4gICAgICBpZiAoZGV2aWNlT3B0aW1hbFNldHRpbmdzICYmIGRldmljZU9wdGltYWxTZXR0aW5nc1twcm9wXSAhPT0gdW5kZWZpbmVkKSByZXR1cm4gZGV2aWNlT3B0aW1hbFNldHRpbmdzW3Byb3BdO1xyXG4gICAgICByZXR1cm4gZmFsbGJhY2s7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIE5vZGUgcmFkaXVzIHJlc29sdXRpb25cclxuICAgIGNvbnN0IHJlc29sdmVkTm9kZVJhZGl1cyA9IHVzZXJOb2RlUmFkaXVzIHx8IHtcclxuICAgICAgbWluOiBvcHRpbWFsUGVyZm9ybWFuY2VUaWVyID09PSBEYXRhTmV0d29ya1BlcmZvcm1hbmNlVGllcnMuSElHSCA/IDEgOiAwLjUsXHJcbiAgICAgIG1heDogb3B0aW1hbFBlcmZvcm1hbmNlVGllciA9PT0gRGF0YU5ldHdvcmtQZXJmb3JtYW5jZVRpZXJzLkhJR0ggPyAzIDogMlxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBHUFUgYWNjZWxlcmF0aW9uIGJhc2VkIG9uIGRldmljZSBhbmQgdGllclxyXG4gICAgY29uc3QgcmVzb2x2ZWRFbmFibGVHUFUgPSB1c2VyRW5hYmxlR1BVICE9PSB1bmRlZmluZWQgXHJcbiAgICAgID8gdXNlckVuYWJsZUdQVSBcclxuICAgICAgOiBkZXZpY2VDYXBhYmlsaXRpZXMuaXNIaWdoUGVyZm9ybWFuY2UgJiYgb3B0aW1hbFBlcmZvcm1hbmNlVGllciAhPT0gRGF0YU5ldHdvcmtQZXJmb3JtYW5jZVRpZXJzLk1JTklNQUw7XHJcblxyXG4gICAgLy8gT3BhY2l0eSByZXNvbHV0aW9uIHdpdGggYWNjZXNzaWJpbGl0eSBjb25zaWRlcmF0aW9uc1xyXG4gICAgY29uc3QgYmFzZU9wYWNpdHkgPSByZXNvbHZlKHVzZXJPcGFjaXR5LCAnb3BhY2l0eScsIDEpO1xyXG4gICAgY29uc3QgcmVzb2x2ZWRPcGFjaXR5ID0gYWNjZXNzaWJpbGl0eUNvbmZpZz8ub3BhY2l0eSAhPT0gdW5kZWZpbmVkIFxyXG4gICAgICA/IE1hdGgubWluKGJhc2VPcGFjaXR5LCBhY2Nlc3NpYmlsaXR5Q29uZmlnLm9wYWNpdHkpXHJcbiAgICAgIDogYmFzZU9wYWNpdHk7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbm9kZUNvdW50OiByZXNvbHZlKHVzZXJOb2RlQ291bnQsICdub2RlQ291bnQnLCA1MCksXHJcbiAgICAgIGFuaW1hdGlvblNwZWVkOiByZXNvbHZlKHVzZXJBbmltYXRpb25TcGVlZCwgJ2FuaW1hdGlvblNwZWVkJywgMC41KSxcclxuICAgICAgY29ubmVjdGlvbkRpc3RhbmNlOiByZXNvbHZlKHVzZXJDb25uZWN0aW9uRGlzdGFuY2UsICdjb25uZWN0aW9uRGlzdGFuY2UnLCAxMjApLFxyXG4gICAgICBub2RlUmFkaXVzOiByZXNvbHZlZE5vZGVSYWRpdXMsXHJcbiAgICAgIGxpbmVXaWR0aDogdXNlckxpbmVXaWR0aCB8fCAxLFxyXG4gICAgICBvcGFjaXR5OiByZXNvbHZlZE9wYWNpdHksXHJcbiAgICAgIG1heEZQUzogcmVzb2x2ZSh1c2VyTWF4RlBTLCAnbWF4RlBTJywgNjApLFxyXG4gICAgICBlbmFibGVHUFVBY2NlbGVyYXRpb246IHJlc29sdmVkRW5hYmxlR1BVLFxyXG4gICAgICBcclxuICAgICAgLy8gQWRkaXRpb25hbCBjb21wdXRlZCBwcm9wZXJ0aWVzXHJcbiAgICAgIHBlcmZvcm1hbmNlVGllcjogb3B0aW1hbFBlcmZvcm1hbmNlVGllcixcclxuICAgICAgZGV2aWNlQ2FwYWJpbGl0aWVzLFxyXG4gICAgICBtb3Rpb25QcmVmZXJlbmNlcyxcclxuICAgICAgZWZmZWN0aXZlUmVkdWNlZE1vdGlvbixcclxuICAgICAgaXNBbmltYXRpb25EaXNhYmxlZDogYWNjZXNzaWJpbGl0eSA9PT0gJ2Rpc2FibGUnIHx8IFxyXG4gICAgICAgIChhY2Nlc3NpYmlsaXR5ID09PSAncmVzcGVjdC1tb3Rpb24nICYmIGVmZmVjdGl2ZVJlZHVjZWRNb3Rpb24gJiYgYWNjZXNzaWJpbGl0eUNvbmZpZz8uZGlzYWJsZWQpLFxyXG4gICAgICBcclxuICAgICAgLy8gQ29udGV4dCBhbmQgcGVyZm9ybWFuY2UgaW5mb1xyXG4gICAgICBjb250ZXh0LFxyXG4gICAgICBwZXJmb3JtYW5jZSxcclxuICAgICAgYWNjZXNzaWJpbGl0eSxcclxuICAgICAgXHJcbiAgICAgIC8vIFRoZW1lIHJlc29sdXRpb25cclxuICAgICAgZWZmZWN0aXZlUHJlc2V0OiBwcmVzZXQgfHwgY29udGV4dENvbmZpZy5wcmVzZXQgfHwgJ2RlZmF1bHQnLFxyXG4gICAgICB0aGVtZTogdGhlbWUgfHwgJ2F1dG8nXHJcbiAgICB9O1xyXG4gIH0sIFtcclxuICAgIHVzZXJOb2RlQ291bnQsIHVzZXJBbmltYXRpb25TcGVlZCwgdXNlckNvbm5lY3Rpb25EaXN0YW5jZSwgdXNlck5vZGVSYWRpdXMsXHJcbiAgICB1c2VyTGluZVdpZHRoLCB1c2VyT3BhY2l0eSwgdXNlck1heEZQUywgdXNlckVuYWJsZUdQVSxcclxuICAgIG9wdGltYWxQZXJmb3JtYW5jZVRpZXIsIGFjY2Vzc2liaWxpdHlDb25maWcsIHBlcmZvcm1hbmNlQ29uZmlnLFxyXG4gICAgY29udGV4dENvbmZpZywgZGV2aWNlT3B0aW1hbFNldHRpbmdzLCBkZXZpY2VDYXBhYmlsaXRpZXMsXHJcbiAgICBtb3Rpb25QcmVmZXJlbmNlcywgZWZmZWN0aXZlUmVkdWNlZE1vdGlvbiwgYWNjZXNzaWJpbGl0eSxcclxuICAgIGNvbnRleHQsIHBlcmZvcm1hbmNlLCBwcmVzZXQsIHRoZW1lXHJcbiAgXSk7XHJcblxyXG4gIC8vIFBlcmZvcm1hbmNlIGltcGFjdCBjYWxjdWxhdGlvblxyXG4gIGNvbnN0IHBlcmZvcm1hbmNlSW1wYWN0ID0gdXNlTWVtbygoKSA9PiB7XHJcbiAgICBjb25zdCB7IG5vZGVDb3VudCwgYW5pbWF0aW9uU3BlZWQsIGNvbm5lY3Rpb25EaXN0YW5jZSB9ID0gcmVzb2x2ZWREZWZhdWx0cztcclxuICAgIFxyXG4gICAgLy8gU2ltcGxlIHBlcmZvcm1hbmNlIHNjb3JlIGNhbGN1bGF0aW9uXHJcbiAgICBjb25zdCBub2RlU2NvcmUgPSAobm9kZUNvdW50IC8gMTAwKSAqIDMwO1xyXG4gICAgY29uc3Qgc3BlZWRTY29yZSA9IGFuaW1hdGlvblNwZWVkICogNDA7XHJcbiAgICBjb25zdCBjb25uZWN0aW9uU2NvcmUgPSAoY29ubmVjdGlvbkRpc3RhbmNlIC8gMjAwKSAqIDMwO1xyXG4gICAgXHJcbiAgICBjb25zdCB0b3RhbFNjb3JlID0gbm9kZVNjb3JlICsgc3BlZWRTY29yZSArIGNvbm5lY3Rpb25TY29yZTtcclxuICAgIFxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgc2NvcmU6IE1hdGgubWluKDEwMCwgTWF0aC5tYXgoMCwgdG90YWxTY29yZSkpLFxyXG4gICAgICBsZXZlbDogdG90YWxTY29yZSA8IDMwID8gJ2xpZ2h0JyA6IHRvdGFsU2NvcmUgPCA2MCA/ICdtb2RlcmF0ZScgOiAnaGVhdnknLFxyXG4gICAgICByZWNvbW1lbmRhdGlvbjogdG90YWxTY29yZSA+IDgwID8gJ0NvbnNpZGVyIHJlZHVjaW5nIGFuaW1hdGlvbiBjb21wbGV4aXR5IGZvciBiZXR0ZXIgcGVyZm9ybWFuY2UnIDogbnVsbFxyXG4gICAgfTtcclxuICB9LCBbcmVzb2x2ZWREZWZhdWx0c10pO1xyXG5cclxuICAvLyBWYWxpZGF0aW9uIGluIGRldmVsb3BtZW50XHJcbiAgY29uc3QgdmFsaWRhdGlvbldhcm5pbmdzID0gdXNlTWVtbygoKSA9PiB7XHJcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdkZXZlbG9wbWVudCcpIHJldHVybiBbXTtcclxuICAgIFxyXG4gICAgY29uc3Qgd2FybmluZ3MgPSBbXTtcclxuICAgIFxyXG4gICAgLy8gQ2hlY2sgZm9yIHBlcmZvcm1hbmNlIGNvbmZsaWN0c1xyXG4gICAgaWYgKHVzZXJQZXJmb3JtYW5jZVRpZXIgPT09IERhdGFOZXR3b3JrUGVyZm9ybWFuY2VUaWVycy5ISUdIICYmIGRldmljZUNhcGFiaWxpdGllcy5pc01vYmlsZSkge1xyXG4gICAgICB3YXJuaW5ncy5wdXNoKCdIaWdoIHBlcmZvcm1hbmNlIHRpZXIgb24gbW9iaWxlIGRldmljZSBtYXkgY2F1c2UgcGVyZm9ybWFuY2UgaXNzdWVzJyk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIENoZWNrIGZvciBhY2Nlc3NpYmlsaXR5IGNvbmZsaWN0c1xyXG4gICAgaWYgKGFjY2Vzc2liaWxpdHkgPT09ICdkaXNhYmxlJyAmJiBlZmZlY3RpdmVSZWR1Y2VkTW90aW9uKSB7XHJcbiAgICAgIHdhcm5pbmdzLnB1c2goJ0FuaW1hdGlvbiBkaXNhYmxlZCBidXQgdXNlciBwcmVmZXJzIHJlZHVjZWQgbW90aW9uIC0gY29uc2lkZXIgdXNpbmcgcmVzcGVjdC1tb3Rpb24gbW9kZScpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBDaGVjayBmb3IgdW5yZWFsaXN0aWMgdmFsdWVzXHJcbiAgICBpZiAodXNlck5vZGVDb3VudCA+IDIwMCAmJiAhZGV2aWNlQ2FwYWJpbGl0aWVzLmlzSGlnaFBlcmZvcm1hbmNlKSB7XHJcbiAgICAgIHdhcm5pbmdzLnB1c2goJ0hpZ2ggbm9kZSBjb3VudCBvbiBub24taGlnaC1wZXJmb3JtYW5jZSBkZXZpY2UgbWF5IGNhdXNlIGxhZycpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gd2FybmluZ3M7XHJcbiAgfSwgW3VzZXJQZXJmb3JtYW5jZVRpZXIsIGRldmljZUNhcGFiaWxpdGllcywgYWNjZXNzaWJpbGl0eSwgZWZmZWN0aXZlUmVkdWNlZE1vdGlvbiwgdXNlck5vZGVDb3VudF0pO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgLi4ucmVzdFByb3BzLFxyXG4gICAgLi4ucmVzb2x2ZWREZWZhdWx0cyxcclxuICAgIHBlcmZvcm1hbmNlSW1wYWN0LFxyXG4gICAgdmFsaWRhdGlvbldhcm5pbmdzLFxyXG4gICAgXHJcbiAgICAvLyBIZWxwZXIgbWV0aG9kc1xyXG4gICAgZ2V0UmVjb21tZW5kZWRTZXR0aW5nczogKCkgPT4gKHtcclxuICAgICAgbm9kZUNvdW50OiBwZXJmb3JtYW5jZUNvbmZpZy5ub2RlQ291bnQsXHJcbiAgICAgIGFuaW1hdGlvblNwZWVkOiBwZXJmb3JtYW5jZUNvbmZpZy5hbmltYXRpb25TcGVlZCxcclxuICAgICAgY29ubmVjdGlvbkRpc3RhbmNlOiBwZXJmb3JtYW5jZUNvbmZpZy5jb25uZWN0aW9uRGlzdGFuY2VcclxuICAgIH0pLFxyXG4gICAgXHJcbiAgICBzaG91bGRVc2VTdGF0aWNSZW5kZXJpbmc6ICgpID0+IHtcclxuICAgICAgcmV0dXJuIHJlc29sdmVkRGVmYXVsdHMuaXNBbmltYXRpb25EaXNhYmxlZCB8fCBcclxuICAgICAgICAgICAgIHJlc29sdmVkRGVmYXVsdHMucGVyZm9ybWFuY2VUaWVyID09PSBEYXRhTmV0d29ya1BlcmZvcm1hbmNlVGllcnMuTUlOSU1BTDtcclxuICAgIH0sXHJcbiAgICBcclxuICAgIGNhblVzZUdQVUFjY2VsZXJhdGlvbjogKCkgPT4ge1xyXG4gICAgICByZXR1cm4gcmVzb2x2ZWREZWZhdWx0cy5lbmFibGVHUFVBY2NlbGVyYXRpb24gJiYgXHJcbiAgICAgICAgICAgICBkZXZpY2VDYXBhYmlsaXRpZXMuaXNIaWdoUGVyZm9ybWFuY2U7XHJcbiAgICB9XHJcbiAgfTtcclxufTtcclxuXHJcbi8vIEV4cG9ydCBoZWxwZXIgdG8gZ2V0IG9wdGltYWwgc2V0dGluZ3MgZm9yIGEgc3BlY2lmaWMgY29udGV4dFxyXG5leHBvcnQgY29uc3QgZ2V0T3B0aW1hbFNldHRpbmdzRm9yQ29udGV4dCA9IChjb250ZXh0LCBkZXZpY2VDYXBhYmlsaXRpZXMgPSBudWxsKSA9PiB7XHJcbiAgY29uc3QgY2FwcyA9IGRldmljZUNhcGFiaWxpdGllcyB8fCBkZXRlY3REZXZpY2VDYXBhYmlsaXRpZXMoKTtcclxuICBjb25zdCBtb3Rpb25QcmVmcyA9IGRldGVjdE1vdGlvblByZWZlcmVuY2VzKCk7XHJcbiAgXHJcbiAgLy8gR2V0IGJhc2UgY29udGV4dCBjb25maWdcclxuICBjb25zdCBjb250ZXh0Q29uZmlnID0gY29udGV4dERlZmF1bHRzW2NvbnRleHRdIHx8IGNvbnRleHREZWZhdWx0c1tEYXRhTmV0d29ya0NvbnRleHRUeXBlcy5HRU5FUkFMXTtcclxuICBcclxuICAvLyBBZGp1c3QgZm9yIGRldmljZSBjYXBhYmlsaXRpZXNcclxuICBpZiAoY2Fwcy5pc01vYmlsZSB8fCAhY2Fwcy5pc0hpZ2hQZXJmb3JtYW5jZSkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgLi4uY29udGV4dENvbmZpZyxcclxuICAgICAgbm9kZUNvdW50OiBNYXRoLmZsb29yKGNvbnRleHRDb25maWcubm9kZUNvdW50ICogMC42KSxcclxuICAgICAgYW5pbWF0aW9uU3BlZWQ6IGNvbnRleHRDb25maWcuYW5pbWF0aW9uU3BlZWQgKiAwLjcsXHJcbiAgICAgIGNvbm5lY3Rpb25EaXN0YW5jZTogY29udGV4dENvbmZpZy5jb25uZWN0aW9uRGlzdGFuY2UgKiAwLjhcclxuICAgIH07XHJcbiAgfVxyXG4gIFxyXG4gIC8vIEFkanVzdCBmb3IgbW90aW9uIHByZWZlcmVuY2VzXHJcbiAgaWYgKG1vdGlvblByZWZzLnByZWZlcnNSZWR1Y2VkTW90aW9uKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAuLi5jb250ZXh0Q29uZmlnLFxyXG4gICAgICBub2RlQ291bnQ6IE1hdGguZmxvb3IoY29udGV4dENvbmZpZy5ub2RlQ291bnQgKiAwLjMpLFxyXG4gICAgICBhbmltYXRpb25TcGVlZDogY29udGV4dENvbmZpZy5hbmltYXRpb25TcGVlZCAqIDAuMixcclxuICAgICAgY29ubmVjdGlvbkRpc3RhbmNlOiBjb250ZXh0Q29uZmlnLmNvbm5lY3Rpb25EaXN0YW5jZSAqIDAuNVxyXG4gICAgfTtcclxuICB9XHJcbiAgXHJcbiAgcmV0dXJuIGNvbnRleHRDb25maWc7XHJcbn07XHJcblxyXG4vLyBFeHBvcnQgcGVyZm9ybWFuY2UgdGllciBzZWxlY3RvciBoZWxwZXJcclxuZXhwb3J0IGNvbnN0IHNlbGVjdFBlcmZvcm1hbmNlVGllciA9IChyZXF1aXJlbWVudHMgPSB7fSkgPT4ge1xyXG4gIGNvbnN0IHtcclxuICAgIHRhcmdldEZQUyA9IDMwLFxyXG4gICAgbWF4Tm9kZXMgPSA1MCxcclxuICAgIGRldmljZUNhcGFiaWxpdGllcyA9IGRldGVjdERldmljZUNhcGFiaWxpdGllcygpLFxyXG4gICAgcHJlZmVyUXVhbGl0eSA9IGZhbHNlXHJcbiAgfSA9IHJlcXVpcmVtZW50cztcclxuICBcclxuICAvLyBIaWdoIHBlcmZvcm1hbmNlIGNvbmRpdGlvbnNcclxuICBpZiAoZGV2aWNlQ2FwYWJpbGl0aWVzLmlzSGlnaFBlcmZvcm1hbmNlICYmIHRhcmdldEZQUyA+PSA2MCAmJiBwcmVmZXJRdWFsaXR5KSB7XHJcbiAgICByZXR1cm4gRGF0YU5ldHdvcmtQZXJmb3JtYW5jZVRpZXJzLkhJR0g7XHJcbiAgfVxyXG4gIFxyXG4gIC8vIExvdy9NaW5pbWFsIHBlcmZvcm1hbmNlIGNvbmRpdGlvbnNcclxuICBpZiAoZGV2aWNlQ2FwYWJpbGl0aWVzLmlzTW9iaWxlIHx8IHRhcmdldEZQUyA8IDI0IHx8IG1heE5vZGVzIDwgMjApIHtcclxuICAgIHJldHVybiB0YXJnZXRGUFMgPCAxNSA/IERhdGFOZXR3b3JrUGVyZm9ybWFuY2VUaWVycy5NSU5JTUFMIDogRGF0YU5ldHdvcmtQZXJmb3JtYW5jZVRpZXJzLkxPVztcclxuICB9XHJcbiAgXHJcbiAgLy8gRGVmYXVsdCB0byBtZWRpdW1cclxuICByZXR1cm4gRGF0YU5ldHdvcmtQZXJmb3JtYW5jZVRpZXJzLk1FRElVTTtcclxufTsiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLE9BQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLGNBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLFlBQUEsR0FBQUosT0FBQTtBQUt3RCxNQUFBSyxTQUFBO0FBQUEsU0FBQUMsUUFBQUMsQ0FBQSxFQUFBQyxDQUFBLFFBQUFDLENBQUEsR0FBQUMsTUFBQSxDQUFBQyxJQUFBLENBQUFKLENBQUEsT0FBQUcsTUFBQSxDQUFBRSxxQkFBQSxRQUFBQyxDQUFBLEdBQUFILE1BQUEsQ0FBQUUscUJBQUEsQ0FBQUws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