{"version":3,"names":["_react","require","_performance","_themes","_accessibility","_DataNetwork","_excluded","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_toPropertyKey","value","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","TypeError","String","Number","_objectWithoutProperties","_objectWithoutPropertiesLoose","n","indexOf","propertyIsEnumerable","hasOwnProperty","useSmartDefaults","props","nodeCount","userNodeCount","animationSpeed","userAnimationSpeed","connectionDistance","userConnectionDistance","nodeRadius","userNodeRadius","lineWidth","userLineWidth","opacity","userOpacity","maxFPS","userMaxFPS","context","DataNetworkContextTypes","GENERAL","performanceTier","userPerformanceTier","performance","accessibility","reducedMotion","userReducedMotion","preset","theme","enableGPUAcceleration","userEnableGPU","restProps","deviceCapabilities","useMemo","detectDeviceCapabilities","motionPreferences","detectMotionPreferences","effectiveReducedMotion","undefined","prefersReducedMotion","optimalPerformanceTier","DataNetworkPerformanceTiers","AUTO","MINIMAL","tierPreset","getOptimalPerformanceTier","HIGH","MEDIUM","LOW","contextConfig","contextDefaults","performanceConfig","performanceDefaults","accessibilityConfig","getAccessibilitySettings","deviceOptimalSettings","getOptimalSettings","resolvedDefaults","resolve","userValue","prop","fallback","resolvedNodeRadius","min","max","resolvedEnableGPU","isHighPerformance","baseOpacity","resolvedOpacity","Math","isAnimationDisabled","disabled","effectivePreset","performanceImpact","nodeScore","speedScore","connectionScore","totalScore","score","level","recommendation","validationWarnings","process","env","NODE_ENV","warnings","isMobile","getRecommendedSettings","shouldUseStaticRendering","canUseGPUAcceleration","exports","getOptimalSettingsForContext","caps","motionPrefs","floor","selectPerformanceTier","requirements","targetFPS","maxNodes","preferQuality"],"sources":["useSmartDefaults.js"],"sourcesContent":["import { useMemo } from 'react';\r\nimport { detectDeviceCapabilities, getOptimalSettings } from '../performance';\r\nimport { getOptimalPerformanceTier, resolveThemeConfig } from '../themes';\r\nimport { detectMotionPreferences, getAccessibilitySettings } from '../accessibility';\r\nimport { \r\n  contextDefaults, \r\n  performanceDefaults,\r\n  DataNetworkPerformanceTiers,\r\n  DataNetworkContextTypes \r\n} from '../../components/DataNetwork/DataNetwork.types';\r\n\r\n/**\r\n * Smart defaults hook for DataNetwork component\r\n * Intelligently resolves prop values based on device capabilities, context, and user preferences\r\n */\r\nexport const useSmartDefaults = (props = {}) => {\r\n  const {\r\n    // Extract user-provided props\r\n    nodeCount: userNodeCount,\r\n    animationSpeed: userAnimationSpeed,\r\n    connectionDistance: userConnectionDistance,\r\n    nodeRadius: userNodeRadius,\r\n    lineWidth: userLineWidth,\r\n    opacity: userOpacity,\r\n    maxFPS: userMaxFPS,\r\n    \r\n    // Context and configuration\r\n    context = DataNetworkContextTypes.GENERAL,\r\n    performanceTier: userPerformanceTier,\r\n    performance = 'auto',\r\n    accessibility = 'respect-motion',\r\n    reducedMotion: userReducedMotion,\r\n    preset,\r\n    theme,\r\n    \r\n    // Feature flags\r\n    enableGPUAcceleration: userEnableGPU,\r\n    ...restProps\r\n  } = props;\r\n\r\n  // Memoize device capabilities detection\r\n  const deviceCapabilities = useMemo(() => detectDeviceCapabilities(), []);\r\n  \r\n  // Memoize motion preferences\r\n  const motionPreferences = useMemo(() => detectMotionPreferences(), []);\r\n  \r\n  // Determine effective reduced motion preference\r\n  const effectiveReducedMotion = userReducedMotion !== undefined \r\n    ? userReducedMotion \r\n    : motionPreferences.prefersReducedMotion;\r\n\r\n  // Calculate optimal performance tier\r\n  const optimalPerformanceTier = useMemo(() => {\r\n    // User override takes precedence\r\n    if (userPerformanceTier && userPerformanceTier !== DataNetworkPerformanceTiers.AUTO) {\r\n      return userPerformanceTier;\r\n    }\r\n    \r\n    // Check accessibility requirements first\r\n    if (accessibility === 'respect-motion' && effectiveReducedMotion) {\r\n      return DataNetworkPerformanceTiers.MINIMAL;\r\n    }\r\n    \r\n    // Auto-detect based on device and context\r\n    if (performance === 'auto') {\r\n      const tierPreset = getOptimalPerformanceTier(deviceCapabilities, context);\r\n      \r\n      // Map theme preset to performance tier\r\n      if (tierPreset === 'desktopHeavy') return DataNetworkPerformanceTiers.HIGH;\r\n      if (tierPreset === 'desktopStandard') return DataNetworkPerformanceTiers.MEDIUM;\r\n      if (tierPreset === 'mobileLight') return DataNetworkPerformanceTiers.LOW;\r\n      if (tierPreset === 'mobileMinimal') return DataNetworkPerformanceTiers.MINIMAL;\r\n      if (tierPreset === 'accessibilitySafe') return DataNetworkPerformanceTiers.MINIMAL;\r\n      \r\n      return DataNetworkPerformanceTiers.MEDIUM;\r\n    }\r\n    \r\n    return DataNetworkPerformanceTiers.MEDIUM;\r\n  }, [userPerformanceTier, performance, deviceCapabilities, context, accessibility, effectiveReducedMotion]);\r\n\r\n  // Get context-based defaults\r\n  const contextConfig = contextDefaults[context] || contextDefaults[DataNetworkContextTypes.GENERAL];\r\n  \r\n  // Get performance tier defaults\r\n  const performanceConfig = performanceDefaults[optimalPerformanceTier] || performanceDefaults[DataNetworkPerformanceTiers.MEDIUM];\r\n  \r\n  // Get accessibility settings if needed\r\n  const accessibilityConfig = useMemo(() => {\r\n    if (accessibility === 'respect-motion' && effectiveReducedMotion) {\r\n      return getAccessibilitySettings({ prefersReducedMotion: true });\r\n    }\r\n    return null;\r\n  }, [accessibility, effectiveReducedMotion]);\r\n\r\n  // Get device-optimized settings\r\n  const deviceOptimalSettings = useMemo(() => {\r\n    if (performance === 'auto') {\r\n      return getOptimalSettings(deviceCapabilities);\r\n    }\r\n    return null;\r\n  }, [performance, deviceCapabilities]);\r\n\r\n  // Smart resolution logic - prioritize in this order:\r\n  // 1. User-provided values\r\n  // 2. Accessibility requirements\r\n  // 3. Performance tier settings\r\n  // 4. Context-specific defaults\r\n  // 5. Device-optimized settings\r\n  // 6. Fallback defaults\r\n  const resolvedDefaults = useMemo(() => {\r\n    const resolve = (userValue, prop, fallback) => {\r\n      if (userValue !== undefined && userValue !== null) return userValue;\r\n      if (accessibilityConfig && accessibilityConfig[prop] !== undefined) return accessibilityConfig[prop];\r\n      if (performanceConfig[prop] !== undefined) return performanceConfig[prop];\r\n      if (contextConfig[prop] !== undefined) return contextConfig[prop];\r\n      if (deviceOptimalSettings && deviceOptimalSettings[prop] !== undefined) return deviceOptimalSettings[prop];\r\n      return fallback;\r\n    };\r\n\r\n    // Node radius resolution\r\n    const resolvedNodeRadius = userNodeRadius || {\r\n      min: optimalPerformanceTier === DataNetworkPerformanceTiers.HIGH ? 1 : 0.5,\r\n      max: optimalPerformanceTier === DataNetworkPerformanceTiers.HIGH ? 3 : 2\r\n    };\r\n\r\n    // GPU acceleration based on device and tier\r\n    const resolvedEnableGPU = userEnableGPU !== undefined \r\n      ? userEnableGPU \r\n      : deviceCapabilities.isHighPerformance && optimalPerformanceTier !== DataNetworkPerformanceTiers.MINIMAL;\r\n\r\n    // Opacity resolution with accessibility considerations\r\n    const baseOpacity = resolve(userOpacity, 'opacity', 1);\r\n    const resolvedOpacity = accessibilityConfig?.opacity !== undefined \r\n      ? Math.min(baseOpacity, accessibilityConfig.opacity)\r\n      : baseOpacity;\r\n\r\n    return {\r\n      nodeCount: resolve(userNodeCount, 'nodeCount', 50),\r\n      animationSpeed: resolve(userAnimationSpeed, 'animationSpeed', 0.5),\r\n      connectionDistance: resolve(userConnectionDistance, 'connectionDistance', 120),\r\n      nodeRadius: resolvedNodeRadius,\r\n      lineWidth: userLineWidth || 1,\r\n      opacity: resolvedOpacity,\r\n      maxFPS: resolve(userMaxFPS, 'maxFPS', 60),\r\n      enableGPUAcceleration: resolvedEnableGPU,\r\n      \r\n      // Additional computed properties\r\n      performanceTier: optimalPerformanceTier,\r\n      deviceCapabilities,\r\n      motionPreferences,\r\n      effectiveReducedMotion,\r\n      isAnimationDisabled: accessibility === 'disable' || \r\n        (accessibility === 'respect-motion' && effectiveReducedMotion && accessibilityConfig?.disabled),\r\n      \r\n      // Context and performance info\r\n      context,\r\n      performance,\r\n      accessibility,\r\n      \r\n      // Theme resolution\r\n      effectivePreset: preset || contextConfig.preset || 'default',\r\n      theme: theme || 'auto'\r\n    };\r\n  }, [\r\n    userNodeCount, userAnimationSpeed, userConnectionDistance, userNodeRadius,\r\n    userLineWidth, userOpacity, userMaxFPS, userEnableGPU,\r\n    optimalPerformanceTier, accessibilityConfig, performanceConfig,\r\n    contextConfig, deviceOptimalSettings, deviceCapabilities,\r\n    motionPreferences, effectiveReducedMotion, accessibility,\r\n    context, performance, preset, theme\r\n  ]);\r\n\r\n  // Performance impact calculation\r\n  const performanceImpact = useMemo(() => {\r\n    const { nodeCount, animationSpeed, connectionDistance } = resolvedDefaults;\r\n    \r\n    // Simple performance score calculation\r\n    const nodeScore = (nodeCount / 100) * 30;\r\n    const speedScore = animationSpeed * 40;\r\n    const connectionScore = (connectionDistance / 200) * 30;\r\n    \r\n    const totalScore = nodeScore + speedScore + connectionScore;\r\n    \r\n    return {\r\n      score: Math.min(100, Math.max(0, totalScore)),\r\n      level: totalScore < 30 ? 'light' : totalScore < 60 ? 'moderate' : 'heavy',\r\n      recommendation: totalScore > 80 ? 'Consider reducing animation complexity for better performance' : null\r\n    };\r\n  }, [resolvedDefaults]);\r\n\r\n  // Validation in development\r\n  const validationWarnings = useMemo(() => {\r\n    if (process.env.NODE_ENV !== 'development') return [];\r\n    \r\n    const warnings = [];\r\n    \r\n    // Check for performance conflicts\r\n    if (userPerformanceTier === DataNetworkPerformanceTiers.HIGH && deviceCapabilities.isMobile) {\r\n      warnings.push('High performance tier on mobile device may cause performance issues');\r\n    }\r\n    \r\n    // Check for accessibility conflicts\r\n    if (accessibility === 'disable' && effectiveReducedMotion) {\r\n      warnings.push('Animation disabled but user prefers reduced motion - consider using respect-motion mode');\r\n    }\r\n    \r\n    // Check for unrealistic values\r\n    if (userNodeCount > 200 && !deviceCapabilities.isHighPerformance) {\r\n      warnings.push('High node count on non-high-performance device may cause lag');\r\n    }\r\n    \r\n    return warnings;\r\n  }, [userPerformanceTier, deviceCapabilities, accessibility, effectiveReducedMotion, userNodeCount]);\r\n\r\n  return {\r\n    ...restProps,\r\n    ...resolvedDefaults,\r\n    performanceImpact,\r\n    validationWarnings,\r\n    \r\n    // Helper methods\r\n    getRecommendedSettings: () => ({\r\n      nodeCount: performanceConfig.nodeCount,\r\n      animationSpeed: performanceConfig.animationSpeed,\r\n      connectionDistance: performanceConfig.connectionDistance\r\n    }),\r\n    \r\n    shouldUseStaticRendering: () => {\r\n      return resolvedDefaults.isAnimationDisabled || \r\n             resolvedDefaults.performanceTier === DataNetworkPerformanceTiers.MINIMAL;\r\n    },\r\n    \r\n    canUseGPUAcceleration: () => {\r\n      return resolvedDefaults.enableGPUAcceleration && \r\n             deviceCapabilities.isHighPerformance;\r\n    }\r\n  };\r\n};\r\n\r\n// Export helper to get optimal settings for a specific context\r\nexport const getOptimalSettingsForContext = (context, deviceCapabilities = null) => {\r\n  const caps = deviceCapabilities || detectDeviceCapabilities();\r\n  const motionPrefs = detectMotionPreferences();\r\n  \r\n  // Get base context config\r\n  const contextConfig = contextDefaults[context] || contextDefaults[DataNetworkContextTypes.GENERAL];\r\n  \r\n  // Adjust for device capabilities\r\n  if (caps.isMobile || !caps.isHighPerformance) {\r\n    return {\r\n      ...contextConfig,\r\n      nodeCount: Math.floor(contextConfig.nodeCount * 0.6),\r\n      animationSpeed: contextConfig.animationSpeed * 0.7,\r\n      connectionDistance: contextConfig.connectionDistance * 0.8\r\n    };\r\n  }\r\n  \r\n  // Adjust for motion preferences\r\n  if (motionPrefs.prefersReducedMotion) {\r\n    return {\r\n      ...contextConfig,\r\n      nodeCount: Math.floor(contextConfig.nodeCount * 0.3),\r\n      animationSpeed: contextConfig.animationSpeed * 0.2,\r\n      connectionDistance: contextConfig.connectionDistance * 0.5\r\n    };\r\n  }\r\n  \r\n  return contextConfig;\r\n};\r\n\r\n// Export performance tier selector helper\r\nexport const selectPerformanceTier = (requirements = {}) => {\r\n  const {\r\n    targetFPS = 30,\r\n    maxNodes = 50,\r\n    deviceCapabilities = detectDeviceCapabilities(),\r\n    preferQuality = false\r\n  } = requirements;\r\n  \r\n  // High performance conditions\r\n  if (deviceCapabilities.isHighPerformance && targetFPS >= 60 && preferQuality) {\r\n    return DataNetworkPerformanceTiers.HIGH;\r\n  }\r\n  \r\n  // Low/Minimal performance conditions\r\n  if (deviceCapabilities.isMobile || targetFPS < 24 || maxNodes < 20) {\r\n    return targetFPS < 15 ? DataNetworkPerformanceTiers.MINIMAL : DataNetworkPerformanceTiers.LOW;\r\n  }\r\n  \r\n  // Default to medium\r\n  return DataNetworkPerformanceTiers.MEDIUM;\r\n};"],"mappings":"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","ignoreList":[]}