b4ee1de511cfd43b7305565512ac9112
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getOptimalSettings = exports.detectDeviceCapabilities = exports.PerformanceMonitor = void 0;
class PerformanceMonitor {
  constructor() {
    this.fps = 0;
    this.frameCount = 0;
    this.lastTime = performance.now();
    this.fpsHistory = [];
    this.isMonitoring = false;
  }
  startMonitoring() {
    this.isMonitoring = true;
    this.lastTime = performance.now();
    this.frameCount = 0;
  }
  recordFrame() {
    if (!this.isMonitoring) return;
    this.frameCount++;
    const currentTime = performance.now();
    const elapsed = currentTime - this.lastTime;
    if (elapsed >= 1000) {
      this.fps = Math.round(this.frameCount * 1000 / elapsed);
      this.fpsHistory.push(this.fps);
      if (this.fpsHistory.length > 60) this.fpsHistory.shift();
      this.frameCount = 0;
      this.lastTime = currentTime;
    }
  }
  getAverageFPS() {
    return this.fpsHistory.length > 0 ? Math.round(this.fpsHistory.reduce((a, b) => a + b, 0) / this.fpsHistory.length) : 0;
  }
  getPerformanceLevel() {
    const avgFPS = this.getAverageFPS();
    if (avgFPS >= 50) return 'high';
    if (avgFPS >= 30) return 'medium';
    return 'low';
  }
}
exports.PerformanceMonitor = PerformanceMonitor;
const detectDeviceCapabilities = () => ({
  devicePixelRatio: window.devicePixelRatio || 1,
  hardwareConcurrency: navigator.hardwareConcurrency || 2,
  memory: navigator.deviceMemory || 4,
  isMobile: /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),
  isHighPerformance: (navigator.hardwareConcurrency || 2) >= 4 && (navigator.deviceMemory || 4) >= 4
});
exports.detectDeviceCapabilities = detectDeviceCapabilities;
const getOptimalSettings = deviceCaps => {
  if (!deviceCaps.isHighPerformance || deviceCaps.isMobile) {
    return {
      nodeCount: Math.max(20, Math.floor(50 * 0.6)),
      animationSpeed: 0.3,
      connectionDistance: 80,
      qualityLevel: 'medium'
    };
  }
  return {
    nodeCount: 50,
    animationSpeed: 0.5,
    connectionDistance: 120,
    qualityLevel: 'high'
  };
};
exports.getOptimalSettings = getOptimalSettings;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQZXJmb3JtYW5jZU1vbml0b3IiLCJjb25zdHJ1Y3RvciIsImZwcyIsImZyYW1lQ291bnQiLCJsYXN0VGltZSIsInBlcmZvcm1hbmNlIiwibm93IiwiZnBzSGlzdG9yeSIsImlzTW9uaXRvcmluZyIsInN0YXJ0TW9uaXRvcmluZyIsInJlY29yZEZyYW1lIiwiY3VycmVudFRpbWUiLCJlbGFwc2VkIiwiTWF0aCIsInJvdW5kIiwicHVzaCIsImxlbmd0aCIsInNoaWZ0IiwiZ2V0QXZlcmFnZUZQUyIsInJlZHVjZSIsImEiLCJiIiwiZ2V0UGVyZm9ybWFuY2VMZXZlbCIsImF2Z0ZQUyIsImV4cG9ydHMiLCJkZXRlY3REZXZpY2VDYXBhYmlsaXRpZXMiLCJkZXZpY2VQaXhlbFJhdGlvIiwid2luZG93IiwiaGFyZHdhcmVDb25jdXJyZW5jeSIsIm5hdmlnYXRvciIsIm1lbW9yeSIsImRldmljZU1lbW9yeSIsImlzTW9iaWxlIiwidGVzdCIsInVzZXJBZ2VudCIsImlzSGlnaFBlcmZvcm1hbmNlIiwiZ2V0T3B0aW1hbFNldHRpbmdzIiwiZGV2aWNlQ2FwcyIsIm5vZGVDb3VudCIsIm1heCIsImZsb29yIiwiYW5pbWF0aW9uU3BlZWQiLCJjb25uZWN0aW9uRGlzdGFuY2UiLCJxdWFsaXR5TGV2ZWwiXSwic291cmNlcyI6WyJwZXJmb3JtYW5jZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBQZXJmb3JtYW5jZU1vbml0b3Ige1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5mcHMgPSAwO1xyXG4gICAgdGhpcy5mcmFtZUNvdW50ID0gMDtcclxuICAgIHRoaXMubGFzdFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcclxuICAgIHRoaXMuZnBzSGlzdG9yeSA9IFtdO1xyXG4gICAgdGhpcy5pc01vbml0b3JpbmcgPSBmYWxzZTtcclxuICB9XHJcblxyXG4gIHN0YXJ0TW9uaXRvcmluZygpIHtcclxuICAgIHRoaXMuaXNNb25pdG9yaW5nID0gdHJ1ZTtcclxuICAgIHRoaXMubGFzdFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcclxuICAgIHRoaXMuZnJhbWVDb3VudCA9IDA7XHJcbiAgfVxyXG5cclxuICByZWNvcmRGcmFtZSgpIHtcclxuICAgIGlmICghdGhpcy5pc01vbml0b3JpbmcpIHJldHVybjtcclxuICAgIFxyXG4gICAgdGhpcy5mcmFtZUNvdW50Kys7XHJcbiAgICBjb25zdCBjdXJyZW50VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xyXG4gICAgY29uc3QgZWxhcHNlZCA9IGN1cnJlbnRUaW1lIC0gdGhpcy5sYXN0VGltZTtcclxuXHJcbiAgICBpZiAoZWxhcHNlZCA+PSAxMDAwKSB7XHJcbiAgICAgIHRoaXMuZnBzID0gTWF0aC5yb3VuZCgodGhpcy5mcmFtZUNvdW50ICogMTAwMCkgLyBlbGFwc2VkKTtcclxuICAgICAgdGhpcy5mcHNIaXN0b3J5LnB1c2godGhpcy5mcHMpO1xyXG4gICAgICBpZiAodGhpcy5mcHNIaXN0b3J5Lmxlbmd0aCA+IDYwKSB0aGlzLmZwc0hpc3Rvcnkuc2hpZnQoKTtcclxuICAgICAgXHJcbiAgICAgIHRoaXMuZnJhbWVDb3VudCA9IDA7XHJcbiAgICAgIHRoaXMubGFzdFRpbWUgPSBjdXJyZW50VGltZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldEF2ZXJhZ2VGUFMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5mcHNIaXN0b3J5Lmxlbmd0aCA+IDAgXHJcbiAgICAgID8gTWF0aC5yb3VuZCh0aGlzLmZwc0hpc3RvcnkucmVkdWNlKChhLCBiKSA9PiBhICsgYiwgMCkgLyB0aGlzLmZwc0hpc3RvcnkubGVuZ3RoKVxyXG4gICAgICA6IDA7XHJcbiAgfVxyXG5cclxuICBnZXRQZXJmb3JtYW5jZUxldmVsKCkge1xyXG4gICAgY29uc3QgYXZnRlBTID0gdGhpcy5nZXRBdmVyYWdlRlBTKCk7XHJcbiAgICBpZiAoYXZnRlBTID49IDUwKSByZXR1cm4gJ2hpZ2gnO1xyXG4gICAgaWYgKGF2Z0ZQUyA+PSAzMCkgcmV0dXJuICdtZWRpdW0nO1xyXG4gICAgcmV0dXJuICdsb3cnO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGRldGVjdERldmljZUNhcGFiaWxpdGllcyA9ICgpID0+ICh7XHJcbiAgZGV2aWNlUGl4ZWxSYXRpbzogd2luZG93LmRldmljZVBpeGVsUmF0aW8gfHwgMSxcclxuICBoYXJkd2FyZUNvbmN1cnJlbmN5OiBuYXZpZ2F0b3IuaGFyZHdhcmVDb25jdXJyZW5jeSB8fCAyLFxyXG4gIG1lbW9yeTogbmF2aWdhdG9yLmRldmljZU1lbW9yeSB8fCA0LFxyXG4gIGlzTW9iaWxlOiAvQW5kcm9pZHxpUGhvbmV8aVBhZHxpUG9kfEJsYWNrQmVycnl8SUVNb2JpbGV8T3BlcmEgTWluaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCksXHJcbiAgaXNIaWdoUGVyZm9ybWFuY2U6IChuYXZpZ2F0b3IuaGFyZHdhcmVDb25jdXJyZW5jeSB8fCAyKSA+PSA0ICYmIChuYXZpZ2F0b3IuZGV2aWNlTWVtb3J5IHx8IDQpID49IDRcclxufSk7XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0T3B0aW1hbFNldHRpbmdzID0gKGRldmljZUNhcHMpID0+IHtcclxuICBpZiAoIWRldmljZUNhcHMuaXNIaWdoUGVyZm9ybWFuY2UgfHwgZGV2aWNlQ2Fwcy5pc01vYmlsZSkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbm9kZUNvdW50OiBNYXRoLm1heCgyMCwgTWF0aC5mbG9vcig1MCAqIDAuNikpLFxyXG4gICAgICBhbmltYXRpb25TcGVlZDogMC4zLFxyXG4gICAgICBjb25uZWN0aW9uRGlzdGFuY2U6IDgwLFxyXG4gICAgICBxdWFsaXR5TGV2ZWw6ICdtZWRpdW0nXHJcbiAgICB9O1xyXG4gIH1cclxuICBcclxuICByZXR1cm4ge1xyXG4gICAgbm9kZUNvdW50OiA1MCxcclxuICAgIGFuaW1hdGlvblNwZWVkOiAwLjUsXHJcbiAgICBjb25uZWN0aW9uRGlzdGFuY2U6IDEyMCxcclxuICAgIHF1YWxpdHlMZXZlbDogJ2hpZ2gnXHJcbiAgfTtcclxufTtcclxuXHJcbmV4cG9ydCB7IFBlcmZvcm1hbmNlTW9uaXRvciB9OyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsTUFBTUEsa0JBQWtCLENBQUM7RUFDdkJDLFdBQVdBLENBQUEsRUFBRztJQUNaLElBQUksQ0FBQ0MsR0FBRyxHQUFHLENBQUM7SUFDWixJQUFJLENBQUNDLFVBQVUsR0FBRyxDQUFDO0lBQ25CLElBQUksQ0FBQ0MsUUFBUSxHQUFHQyxXQUFXLENBQUNDLEdBQUcsQ0FBQyxDQUFDO0lBQ2pDLElBQUksQ0FBQ0MsVUFBVSxHQUFHLEVBQUU7SUFDcEIsSUFBSSxDQUFDQyxZQUFZLEdBQUcsS0FBSztFQUMzQjtFQUVBQyxlQUFlQSxDQUFBLEVBQUc7SUFDaEIsSUFBSSxDQUFDRCxZQUFZLEdBQUcsSUFBSTtJQUN4QixJQUFJLENBQUNKLFFBQVEsR0FBR0MsV0FBVyxDQUFDQyxHQUFHLENBQUMsQ0FBQztJQUNqQyxJQUFJLENBQUNILFVBQVUsR0FBRyxDQUFDO0VBQ3JCO0VBRUFPLFdBQVdBLENBQUEsRUFBRztJQUNaLElBQUksQ0FBQyxJQUFJLENBQUNGLFlBQVksRUFBRTtJQUV4QixJQUFJLENBQUNMLFVBQVUsRUFBRTtJQUNqQixNQUFNUSxXQUFXLEdBQUdOLFdBQVcsQ0FBQ0MsR0FBRyxDQUFDLENBQUM7SUFDckMsTUFBTU0sT0FBTyxHQUFHRCxXQUFXLEdBQUcsSUFBSSxDQUFDUCxRQUFRO0lBRTNDLElBQUlRLE9BQU8sSUFBSSxJQUFJLEVBQUU7TUFDbkIsSUFBSSxDQUFDVixHQUFHLEdBQUdXLElBQUksQ0FBQ0MsS0FBSyxDQUFFLElBQUksQ0FBQ1gsVUFBVSxHQUFHLElBQUksR0FBSVMsT0FBTyxDQUFDO01BQ3pELElBQUksQ0FBQ0wsVUFBVSxDQUFDUSxJQUFJLENBQUMsSUFBSSxDQUFDYixHQUFHLENBQUM7TUFDOUIsSUFBSSxJQUFJLENBQUNLLFVBQVUsQ0FBQ1MsTUFBTSxHQUFHLEVBQUUsRUFBRSxJQUFJLENBQUNULFVBQVUsQ0FBQ1UsS0FBSyxDQUFDLENBQUM7TUFFeEQsSUFBSSxDQUFDZCxVQUFVLEdBQUcsQ0FBQztNQUNuQixJQUFJLENBQUNDLFFBQVEsR0FBR08sV0FBVztJQUM3QjtFQUNGO0VBRUFPLGFBQWFBLENBQUEsRUFBRztJQUNkLE9BQU8sSUFBSSxDQUFDWCxVQUFVLENBQUNTLE1BQU0sR0FBRyxDQUFDLEdBQzdCSCxJQUFJLENBQUNDLEtBQUssQ0FBQyxJQUFJLENBQUNQLFVBQVUsQ0FBQ1ksTUFBTSxDQUFDLENBQUNDLENBQUMsRUFBRUMsQ0FBQyxLQUFLRCxDQUFDLEdBQUdDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUNkLFVBQVUsQ0FBQ1MsTUFBTSxDQUFDLEdBQy9FLENBQUM7RUFDUDtFQUVBTSxtQkFBbUJBLENBQUEsRUFBRztJQUNwQixNQUFNQyxNQUFNLEdBQUcsSUFBSSxDQUFDTCxhQUFhLENBQUMsQ0FBQztJQUNuQyxJQUFJSyxNQUFNLElBQUksRUFBRSxFQUFFLE9BQU8sTUFBTTtJQUMvQixJQUFJQSxNQUFNLElBQUksRUFBRSxFQUFFLE9BQU8sUUFBUTtJQUNqQyxPQUFPLEtBQUs7RUFDZDtBQUNGO0FBQUNDLE9BQUEsQ0FBQXhCLGtCQUFBLEdBQUFBLGtCQUFBO0FBRU0sTUFBTXlCLHdCQUF3QixHQUFHQSxDQUFBLE1BQU87RUFDN0NDLGdCQUFnQixFQUFFQyxNQUFNLENBQUNELGdCQUFnQixJQUFJLENBQUM7RUFDOUNFLG1CQUFtQixFQUFFQyxTQUFTLENBQUNELG1CQUFtQixJQUFJLENBQUM7RUFDdkRFLE1BQU0sRUFBRUQsU0FBUyxDQUFDRSxZQUFZLElBQUksQ0FBQztFQUNuQ0MsUUFBUSxFQUFFLDBEQUEwRCxDQUFDQyxJQUFJLENBQUNKLFNBQVMsQ0FBQ0ssU0FBUyxDQUFDO0VBQzlGQyxpQkFBaUIsRUFBRSxDQUFDTixTQUFTLENBQUNELG1CQUFtQixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQ0MsU0FBUyxDQUFDRSxZQUFZLElBQUksQ0FBQyxLQUFLO0FBQ25HLENBQUMsQ0FBQztBQUFDUCxPQUFBLENBQUFDLHdCQUFBLEdBQUFBLHdCQUFBO0FBRUksTUFBTVcsa0JBQWtCLEdBQUlDLFVBQVUsSUFBSztFQUNoRCxJQUFJLENBQUNBLFVBQVUsQ0FBQ0YsaUJBQWlCLElBQUlFLFVBQVUsQ0FBQ0wsUUFBUSxFQUFFO0lBQ3hELE9BQU87TUFDTE0sU0FBUyxFQUFFekIsSUFBSSxDQUFDMEIsR0FBRyxDQUFDLEVBQUUsRUFBRTFCLElBQUksQ0FBQzJCLEtBQUssQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUM7TUFDN0NDLGNBQWMsRUFBRSxHQUFHO01BQ25CQyxrQkFBa0IsRUFBRSxFQUFFO01BQ3RCQyxZQUFZLEVBQUU7SUFDaEIsQ0FBQztFQUNIO0VBRUEsT0FBTztJQUNMTCxTQUFTLEVBQUUsRUFBRTtJQUNiRyxjQUFjLEVBQUUsR0FBRztJQUNuQkMsa0JBQWtCLEVBQUUsR0FBRztJQUN2QkMsWUFBWSxFQUFFO0VBQ2hCLENBQUM7QUFDSCxDQUFDO0FBQUNuQixPQUFBLENBQUFZLGtCQUFBLEdBQUFBLGtCQUFBIiwiaWdub3JlTGlzdCI6W119