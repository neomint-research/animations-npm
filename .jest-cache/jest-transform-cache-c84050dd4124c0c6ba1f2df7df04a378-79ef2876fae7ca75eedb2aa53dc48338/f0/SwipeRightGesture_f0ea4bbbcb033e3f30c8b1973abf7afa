9bff68ed399eb6c6b23a5a4f070a9e76
"use strict";
"use client";

var u = Object.create;
var n = Object.defineProperty;
var w = Object.getOwnPropertyDescriptor;
var S = Object.getOwnPropertyNames,
  p = Object.getOwnPropertySymbols,
  a = Object.getPrototypeOf,
  c = Object.prototype.hasOwnProperty,
  g = Object.prototype.propertyIsEnumerable;
var f = (o, r, t) => r in o ? n(o, r, {
    enumerable: !0,
    configurable: !0,
    writable: !0,
    value: t
  }) : o[r] = t,
  i = (o, r) => {
    for (var t in r || (r = {})) c.call(r, t) && f(o, t, r[t]);
    if (p) for (var t of p(r)) g.call(r, t) && f(o, t, r[t]);
    return o;
  };
var h = (o, r) => {
    for (var t in r) n(o, t, {
      get: r[t],
      enumerable: !0
    });
  },
  l = (o, r, t, s) => {
    if (r && typeof r == "object" || typeof r == "function") for (let e of S(r)) !c.call(o, e) && e !== t && n(o, e, {
      get: () => r[e],
      enumerable: !(s = w(r, e)) || s.enumerable
    });
    return o;
  };
var x = (o, r, t) => (t = o != null ? u(a(o)) : {}, l(r || !o || !o.__esModule ? n(t, "default", {
    value: o,
    enumerable: !0
  }) : t, o)),
  G = o => l(n({}, "__esModule", {
    value: !0
  }), o);
var L = {};
h(L, {
  default: () => k
});
module.exports = G(L);
var m = x(require("react")),
  C = require("react"),
  d = require("../IconoirContext.js");
const V = (o, r) => {
    const t = m.useContext(d.IconoirContext),
      s = i(i({}, t), o);
    return m.createElement("svg", i({
      width: "1.5em",
      height: "1.5em",
      strokeWidth: 1.5,
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      color: "currentColor",
      ref: r
    }, s), m.createElement("path", {
      d: "M14 12C14 15.3137 11.3137 18 8 18C4.68629 18 2 15.3137 2 12C2 8.68629 4.68629 6 8 6C11.3137 6 14 8.68629 14 12ZM14 12H22M22 12L19 9M22 12L19 15",
      stroke: "currentColor",
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }));
  },
  v = (0, C.forwardRef)(V);
var k = v;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1IiwiT2JqZWN0IiwiY3JlYXRlIiwibiIsImRlZmluZVByb3BlcnR5IiwidyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIlMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwicCIsImdldE93blByb3BlcnR5U3ltYm9scyIsImEiLCJnZXRQcm90b3R5cGVPZiIsImMiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImciLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImYiLCJvIiwiciIsInQiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ2YWx1ZSIsImkiLCJjYWxsIiwiaCIsImdldCIsImwiLCJzIiwiZSIsIngiLCJfX2VzTW9kdWxlIiwiRyIsIkwiLCJkZWZhdWx0IiwiayIsIm1vZHVsZSIsImV4cG9ydHMiLCJtIiwicmVxdWlyZSIsIkMiLCJkIiwiViIsInVzZUNvbnRleHQiLCJJY29ub2lyQ29udGV4dCIsImNyZWF0ZUVsZW1lbnQiLCJ3aWR0aCIsImhlaWdodCIsInN0cm9rZVdpZHRoIiwidmlld0JveCIsImZpbGwiLCJ4bWxucyIsImNvbG9yIiwicmVmIiwic3Ryb2tlIiwic3Ryb2tlTGluZWNhcCIsInN0cm9rZUxpbmVqb2luIiwidiIsImZvcndhcmRSZWYiXSwic291cmNlcyI6WyJTd2lwZVJpZ2h0R2VzdHVyZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBjbGllbnRcIjt2YXIgdT1PYmplY3QuY3JlYXRlO3ZhciBuPU9iamVjdC5kZWZpbmVQcm9wZXJ0eTt2YXIgdz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO3ZhciBTPU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzLHA9T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyxhPU9iamVjdC5nZXRQcm90b3R5cGVPZixjPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksZz1PYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO3ZhciBmPShvLHIsdCk9PnIgaW4gbz9uKG8scix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITAsdmFsdWU6dH0pOm9bcl09dCxpPShvLHIpPT57Zm9yKHZhciB0IGluIHJ8fChyPXt9KSljLmNhbGwocix0KSYmZihvLHQsclt0XSk7aWYocClmb3IodmFyIHQgb2YgcChyKSlnLmNhbGwocix0KSYmZihvLHQsclt0XSk7cmV0dXJuIG99O3ZhciBoPShvLHIpPT57Zm9yKHZhciB0IGluIHIpbihvLHQse2dldDpyW3RdLGVudW1lcmFibGU6ITB9KX0sbD0obyxyLHQscyk9PntpZihyJiZ0eXBlb2Ygcj09XCJvYmplY3RcInx8dHlwZW9mIHI9PVwiZnVuY3Rpb25cIilmb3IobGV0IGUgb2YgUyhyKSkhYy5jYWxsKG8sZSkmJmUhPT10JiZuKG8sZSx7Z2V0OigpPT5yW2VdLGVudW1lcmFibGU6IShzPXcocixlKSl8fHMuZW51bWVyYWJsZX0pO3JldHVybiBvfTt2YXIgeD0obyxyLHQpPT4odD1vIT1udWxsP3UoYShvKSk6e30sbChyfHwhb3x8IW8uX19lc01vZHVsZT9uKHQsXCJkZWZhdWx0XCIse3ZhbHVlOm8sZW51bWVyYWJsZTohMH0pOnQsbykpLEc9bz0+bChuKHt9LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLG8pO3ZhciBMPXt9O2goTCx7ZGVmYXVsdDooKT0+a30pO21vZHVsZS5leHBvcnRzPUcoTCk7dmFyIG09eChyZXF1aXJlKFwicmVhY3RcIikpLEM9cmVxdWlyZShcInJlYWN0XCIpLGQ9cmVxdWlyZShcIi4uL0ljb25vaXJDb250ZXh0LmpzXCIpO2NvbnN0IFY9KG8scik9Pntjb25zdCB0PW0udXNlQ29udGV4dChkLkljb25vaXJDb250ZXh0KSxzPWkoaSh7fSx0KSxvKTtyZXR1cm4gbS5jcmVhdGVFbGVtZW50KFwic3ZnXCIsaSh7d2lkdGg6XCIxLjVlbVwiLGhlaWdodDpcIjEuNWVtXCIsc3Ryb2tlV2lkdGg6MS41LHZpZXdCb3g6XCIwIDAgMjQgMjRcIixmaWxsOlwibm9uZVwiLHhtbG5zOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixjb2xvcjpcImN1cnJlbnRDb2xvclwiLHJlZjpyfSxzKSxtLmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIse2Q6XCJNMTQgMTJDMTQgMTUuMzEzNyAxMS4zMTM3IDE4IDggMThDNC42ODYyOSAxOCAyIDE1LjMxMzcgMiAxMkMyIDguNjg2MjkgNC42ODYyOSA2IDggNkMxMS4zMTM3IDYgMTQgOC42ODYyOSAxNCAxMlpNMTQgMTJIMjJNMjIgMTJMMTkgOU0yMiAxMkwxOSAxNVwiLHN0cm9rZTpcImN1cnJlbnRDb2xvclwiLHN0cm9rZUxpbmVjYXA6XCJyb3VuZFwiLHN0cm9rZUxpbmVqb2luOlwicm91bmRcIn0pKX0sdj0oMCxDLmZvcndhcmRSZWYpKFYpO3ZhciBrPXY7XG4iXSwibWFwcGluZ3MiOiI7QUFBQSxZQUFZOztBQUFDLElBQUlBLENBQUMsR0FBQ0MsTUFBTSxDQUFDQyxNQUFNO0FBQUMsSUFBSUMsQ0FBQyxHQUFDRixNQUFNLENBQUNHLGNBQWM7QUFBQyxJQUFJQyxDQUFDLEdBQUNKLE1BQU0sQ0FBQ0ssd0JBQXdCO0FBQUMsSUFBSUMsQ0FBQyxHQUFDTixNQUFNLENBQUNPLG1CQUFtQjtFQUFDQyxDQUFDLEdBQUNSLE1BQU0sQ0FBQ1MscUJBQXFCO0VBQUNDLENBQUMsR0FBQ1YsTUFBTSxDQUFDVyxjQUFjO0VBQUNDLENBQUMsR0FBQ1osTUFBTSxDQUFDYSxTQUFTLENBQUNDLGNBQWM7RUFBQ0MsQ0FBQyxHQUFDZixNQUFNLENBQUNhLFNBQVMsQ0FBQ0csb0JBQW9CO0FBQUMsSUFBSUMsQ0FBQyxHQUFDQSxDQUFDQyxDQUFDLEVBQUNDLENBQUMsRUFBQ0MsQ0FBQyxLQUFHRCxDQUFDLElBQUlELENBQUMsR0FBQ2hCLENBQUMsQ0FBQ2dCLENBQUMsRUFBQ0MsQ0FBQyxFQUFDO0lBQUNFLFVBQVUsRUFBQyxDQUFDLENBQUM7SUFBQ0MsWUFBWSxFQUFDLENBQUMsQ0FBQztJQUFDQyxRQUFRLEVBQUMsQ0FB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